module Expressions

imports

  Names
  Literals
  pgql-lang
  Legacy

template options

  keyword -/- [a-zA-Z0-9]

context-free syntax

  WhereClause.WhereClause = <WHERE <Exp>> {case-insensitive}

  ExpAsVar.ExpAsVar = <<Exp><VarAssign?>>

  Exp = <(<Exp>)> {bracket}
  Exp = PropRef
  Exp = VarRef
  Exp = Literal

  Exp.Not = <NOT <Exp>> {right, case-insensitive}
  Exp.UMin = <-<Exp>> {right}

  Exp.And = <<Exp> AND <Exp>> {left, case-insensitive}
  Exp.Or = <<Exp> OR <Exp>> {left, case-insensitive}
  Exp.Mul = <<Exp> * <Exp>> {left}
  Exp.Add = <<Exp> + <Exp>> {left}
  Exp.Div = <<Exp> / <Exp>> {left}
  Exp.Mod = <<Exp> % <Exp>> {left}
  Exp.Sub = <<Exp> - <Exp>> {left}
  Exp.Eq = <<Exp> = <Exp>> {left}
  Exp.Gt = [[Exp] > [Exp]] {left}
  Exp.Lt = [[Exp] < [Exp]] {left}
  Exp.Gte = [[Exp] >= [Exp]] {left}
  Exp.Lte = [[Exp] <= [Exp]] {left}
  Exp.Cct = [[Exp] || [Exp]] {left}

  Exp.Neq1 = [[Exp] != [Exp]] {left}
  Exp.Neq2 = [[Exp] <> [Exp]] {left}

  Exp.Cast = <CAST(<Exp> AS <DATA-TYPE>)> {case-insensitive}

  Exp.Exists = <EXISTS<Subquery>> {case-insensitive}
  Exp.ScalarSubquery = Subquery
  Subquery.Subquery = <( <Query> )>

  Exp.IsNull = <<Exp> IS NULL> {right, case-insensitive}
  Exp.IsNotNull = <<Exp> IS NOT NULL> {right, case-insensitive}

  Exp.InPredicate = <<Exp> <Not?> IN <ArrayLiteral>> {left, case-insensitive}
  Not.NOT = <NOT> {case-insensitive}

  Exp.SimpleCase  = <CASE <Exp> <WhenClause+> <ElseClause?> END> {case-insensitive}
  Exp.SearchedCase = <CASE <WhenClause+> <ElseClause?> END> {case-insensitive}
  WhenClause.WhenClause = <WHEN <Exp> THEN <Exp>> {case-insensitive}
  ElseClause.ElseClause = <ELSE <Exp>> {case-insensitive}

  Exp.BetweenPredicate = <<Exp> BETWEEN <Exp> AND <Exp>> {left, case-insensitive}

  Exp.SourcePredicate = <<VarRef> IS <Not?> SOURCE <Of?> <VarRef>>  {case-insensitive}
  Exp.DestinationPredicate = <<VarRef> IS <Not?> DESTINATION <Of?> <VarRef>>  {case-insensitive}
  Of.Of = <OF> {case-insensitive}

context-free syntax // function calls

  Exp.FunctionCall = <<PackageNameDot?><FunctionName>(<{Exp ", "}*>)>
  FunctionName.RegularIdentifier = FUNCTION-NAME
  FunctionName.DelimitedIdentifier = DELIMITED-IDENTIFIER
  PackageNameDot.PackageName = <<SchemaNameDot?><Identifier>.>

context-free syntax // Aggregates

  Exp.COUNT        = <COUNT(<Distinct?><StarOrExp>)> {case-insensitive}
  Exp.MIN          = <MIN(<Distinct?><Exp>)> {case-insensitive}
  Exp.MAX          = <MAX(<Distinct?><Exp>)> {case-insensitive}
  Exp.SUM          = <SUM(<Distinct?><Exp>)> {case-insensitive}
  Exp.AVG          = <AVG(<Distinct?><Exp>)> {case-insensitive}
  Exp.ARRAY-AGG    = <ARRAY_AGG(<Distinct?><Exp>)> {case-insensitive}
  Exp.LISTAGG      = <LISTAGG(<Distinct?><Exp><Separator?>)> {case-insensitive}
  Separator.Separator = <, <Exp>>

  StarOrExp.Star = <*>
  StarOrExp = <<Exp>>
  Distinct.Distinct = <DISTINCT> {case-insensitive}

context-free syntax // extract

  Exp.ExtractExp = <EXTRACT(<ExtractField> FROM <Exp>)> {case-insensitive}

  ExtractField.Year = <YEAR> {case-insensitive}
  ExtractField.Month = <MONTH> {case-insensitive}
  ExtractField.Day = <DAY> {case-insensitive}
  ExtractField.Hour = <HOUR> {case-insensitive}
  ExtractField.Minute = <MINUTE> {case-insensitive}
  ExtractField.Second = <SECOND> {case-insensitive}
  ExtractField.TimezoneHour = <TIMEZONE_HOUR> {case-insensitive}
  ExtractField.TimezoneMinute = <TIMEZONE_MINUTE> {case-insensitive}

context-free syntax // substring

  Exp.CharacterSubstring = <SUBSTRING(<Exp> FROM <Exp> <StringLength?>)> {case-insensitive}
  StringLength.StringLength = <FOR <Exp>> {case-insensitive}

context-free syntax // labeled predicate

  Exp.LabeledPredicate = <<VarRef> IS <Not?> LABELED <Labels>> {case-insensitive}

context-free syntax // label expression

  LabelExpression.Labels          = <<LabelExpressionIntroducer> <Labels>>
  LabelExpressionIntroducer.Colon = <:>
  LabelExpressionIntroducer.IS    = <IS> {case-insensitive}
  Labels.Label                    = Identifier
  Labels                          = BindVariable
  Labels.LabelDisjunction         = <<Labels>|<Labels>> {left}

context-free priorities

  {
    right:
      Exp.UMin
  }
  >
  {
    left:
      Exp.Cct
  }
  >
  {
    left:
      Exp.Mul
      Exp.Div
      Exp.Mod
  }
  >
  {
    left:
      Exp.Add
      Exp.Sub
  }
  >
  {
    left:
      Exp.Eq
      Exp.Neq1
      Exp.Neq2
      Exp.Gt
      Exp.Lt
      Exp.Gte
      Exp.Lte
  }
  >
  {
    left:
      Exp.InPredicate
      Exp.BetweenPredicate
  }
  >
  {
    right:
      Exp.IsNull
      Exp.IsNotNull
  }
  >
  {
    right:
      Exp.Not
  }
  >
  {
    left:
      Exp.And
  }
  >
  {
    left:
      Exp.Or
  }
