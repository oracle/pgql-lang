module GraphPattern

imports
  
  Literals
  Names
  Expressions
  Legacy

template options

  keyword -/- [a-zA-Z0-9]

context-free syntax

  GraphPattern.GraphPattern = PathPatternList KeepClause? WhereClause?
  PathPatternList.PathPatternList = <<{PathPattern ","}+>>

  PathPattern.SingleVertex = <(<ElemContents>)> // PGQL 1.0
  Vertex.Vertex = <(<ElemContents>)>

  EdgeVertex.EdgeVertex = Connection Vertex
  Connection.OutConn = [-[EdgeOrPathContents]->[PathQuantifier?]]
  Connection.InConn = [<-[EdgeOrPathContents]-[PathQuantifier?]]
  Connection.UndirectedEdge = [-[EdgeContents]-[PathQuantifier?]]
  Connection.OutEdge = [->[PathQuantifier?]]
  Connection.InEdge = [<-[PathQuantifier?]]
  Connection.UndirectedEdge = [-[PathQuantifier?]]

  RelaxedPathPattern.RelaxedPathPattern = <<Vertex?> <RelaxedEdgeVertex+>> // relaxed means that the vertices can be omitted
  RelaxedEdgeVertex.RelaxedEdgeVertex = <<Connection> <Vertex?>>

  Connection.ParenthesizedPath = <( <RelaxedPathPattern> <WhereClause?> <CostClause?> )<PathQuantifier?>>

  PathPattern.PathPattern2 = PathPatternPrefix? OptionallyParenthesizedPathPattern
  OptionallyParenthesizedPathPattern = <( <PathPattern> )>
  OptionallyParenthesizedPathPattern.PathPattern = Vertex EdgeVertex+

  CostClause.CostClause = <COST <Exp>> {case-insensitive}

  EdgeContents.EdgeContents = <[<ElemContents>]>
  EdgeOrPathContents = EdgeContents
  EdgeOrPathContents.Path = </<Identifier?><LabelExpression><PathQuantifier?>/>

  ElemContents.ElemContents = Identifier? LabelExpression?

  PathQuantifier.ZeroOrMore = <*>
  PathQuantifier.OneOrMore = <+>
  PathQuantifier.Optional = <?>
  PathQuantifier.ExactlyN = <{<UNSIGNED-INT>}>
  PathQuantifier.NOrMore = <{<UNSIGNED-INT>,}>
  PathQuantifier.BetweenNAndM = <{<UNSIGNED-INT>,<UNSIGNED-INT>}>
  PathQuantifier.BetweenZeroAndM = <{,<UNSIGNED-INT>}>

context-free syntax

  KeepClause.KeepClause = <KEEP <PathPatternPrefix>> {case-insensitive}
  PathPatternPrefix = PathModePrefix
  PathPatternPrefix = PathSearchPrefix

  PathModePrefix.PathModePrefix = PathMode PathOrPaths?

  PathMode.Walk = <WALK> {case-insensitive}
  PathMode.Trail = <TRAIL> {case-insensitive}
  PathMode.Simple = <SIMPLE> {case-insensitive}
  PathMode.Acyclic = <ACYCLIC> {case-insensitive}

  PathSearchPrefix = AllPathSearch
  PathSearchPrefix = AnyPathSearch
  PathSearchPrefix = ShortestPathSearch
  PathSearchPrefix = CheapestPathSearch

  AllPathSearch.AllPathSearch = <ALL <PathMode?> <PathOrPaths?>> {case-insensitive}

  AnyPathSearch.AnyPathSearch = <ANY <NumberOfPaths?> <PathMode?> <PathOrPaths?>> {case-insensitive}

  ShortestPathSearch.AllShortestPathSearch = <ALL SHORTEST <PathMode?> <PathOrPaths?>> {case-insensitive}
  ShortestPathSearch.AnyShortestPathSearch = <ANY SHORTEST <PathMode?> <PathOrPaths?>> {case-insensitive}
  ShortestPathSearch.AnyShortestPathSearch2 = <SHORTEST <PathOrPaths?>> {case-insensitive} // deprecated
  ShortestPathSearch.CountedShortestPathSearch = <SHORTEST <NumberOfPaths> <PathMode?> <PathOrPaths?>> {case-insensitive}
  ShortestPathSearch.CountedShortestPathSearch2 = <TOP <NumberOfPaths> SHORTEST> {case-insensitive} // deprecated

  CheapestPathSearch.AnyCheapestPathSearch = <ANY CHEAPEST <PathMode?> <PathOrPaths?>> {case-insensitive}
  CheapestPathSearch.AnyCheapestPathSearch2 = <CHEAPEST <PathOrPaths?>> {case-insensitive} // deprecated
  CheapestPathSearch.CountedCheapestPathSearch = <CHEAPEST <NumberOfPaths> <PathMode?> <PathOrPaths?>> {case-insensitive}
  CheapestPathSearch.CountedCheapestPathSearch2 = <TOP <NumberOfPaths> CHEAPEST> {case-insensitive} // deprecated

  NumberOfPaths.NumberOfPaths = UNSIGNED-INT

  PathOrPaths.PathKeyword = <PATH> {case-insensitive}
  PathOrPaths.PathsKeyword = <PATHS> {case-insensitive}
