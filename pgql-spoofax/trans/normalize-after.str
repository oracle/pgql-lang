module normalize-after

imports

  stratego/-
  signatures/-
  normalized-signatures
  common
  pp
  type-analysis

rules

  normalize-after = try(?AstPlusMetadata(_, metadata)
                  ; innermost(inPredicate-to-non-equality-constraints(|metadata) <+ norm-inPredicate)
                  ; alltd(norm-matchnum)
                  ; AstPlusMetadata(push-down-predicates(|[]), id))
                  ; bottomup(try(pull-lateral-query-up))

rules

  inPredicate-to-non-equality-constraints(|metadata):
    t@InPredicate(exp1, notIn, exp2@Array(valueExpressions)) -> result
    where <not(is-simple-inPredicate-expression)> exp2

        // don't tranform IN into set of non-equality if types are not compatible
        ; [x|xs] := valueExpressions
        ; <?ExpressionPlusType(_, _); is-compatible-type(|x, metadata)> exp1
        ; <map(is-compatible-type(|x, metadata))> valueExpressions
    with disjunction := <map(to-eq-expression(|metadata, exp1, t)); to-disjunction-with-types> valueExpressions
       ; disjunction' := <origin-track-forced(!disjunction)> t
       ; if <?Some(NOT())> notIn
         then result := <origin-track-forced(!Not(disjunction'))> t
         else result := disjunction'
         end

  is-simple-inPredicate-expression = ?BindVariable(_)
  is-simple-inPredicate-expression = ?Array(<id>); map(?ExpressionPlusType(<id>, _); is-literal-no-bindVariable) // array with literals only

  to-eq-expression(|metadata, expPlusType1, origin-term):
    expPlusType2 -> ExpressionPlusType(exp', type')
    where <?ExpressionPlusType(exp1, type1)> expPlusType1
        ; <?ExpressionPlusType(exp2, type2)> expPlusType2
        ; exp' := <origin-track-forced(!Eq(expPlusType1, expPlusType2))> origin-term
        ; if <?Type(t1, _)> type1; <?Type(t2, _)> type2
          then type' := <get-binary-operation-return-type(|metadata); not(?Undefined()) /* if equality operation is not supported between these types then we don't want to normalize */> ("Eq", t1, t2)
          else type' := UnknownType()
          end

  norm-inPredicate:
    t@InPredicate(exp1, notIn, exp2) -> result
    with inPredicate := <origin-track-forced(!InPredicate(exp1, exp2))> t
       ; if <?Some(NOT())> notIn
         then result := <origin-track-forced(!Not(inPredicate))> t
         else result := inPredicate
         end

rules

  norm-matchnum:
    DerivedTable(Some(GraphTable()), Subquery(query), correlation) -> DerivedTable(Some(GraphTable()), Subquery(query'), correlation)
    with dummyVarRef := <collect-in-outer-query(rowsPerMatchVariable-to-varRef); Hd <+ collect-in-outer-query(vertex-to-varRef); Hd> query
       ; query' := <alltd-in-outer-query(?FunctionCall(None(), funcName@Identifier("MATCHNUM", _), []);
                                      !FunctionCall(None(), funcName, [dummyVarRef]))> query

  rowsPerMatchVariable-to-varRef:
    RowsPerMatchVariable(identifier, origin-position, _, _) -> VarRef(identifier, origin-position)

  vertex-to-varRef:
    Vertex(identifier, origin-position, _, _) -> VarRef(identifier, origin-position)

rules

  push-down-predicates(|variablesOuterQuery):
    NormalizedQuery(commonPathExpressions, selectOrModifyClause, optionalGraphName, tableExpressions, Constraints(expressions), groupBy, having, orderBy, limitOffsets, queryAnnotations)
      -> NormalizedQuery( <push-down-predicates-for-commonPathExpressions(|variablesOuterQuery)> commonPathExpressions
                        , <alltd(push-down-predicates(|variablesOuterQuery''))> selectOrModifyClause
                        , optionalGraphName
                        , tableExpressions'
                        , Constraints(non-pushed-down-predicates)
                        , <alltd(push-down-predicates(|variablesOuterQuery'))> groupBy
                        , <alltd(push-down-predicates(|variablesOuterQuery'''))> having
                        , <alltd(push-down-predicates(|variablesOuterQuery'''))> orderBy
                        , limitOffsets, queryAnnotations)
    with expressions' := <map(conjunction-to-list); concat> expressions

         // references to vertices that correlate with vertices in SELECT of prior LATERAL subquery are replaced with references to those prior vertices
         // this allows for pushing down even more predicates
       ; vertices-projected-by-laterals := <filter(?DerivedTable(Some(Lateral()), Subquery(NormalizedQuery(_, SelectClause(_, SelectList(<id>)), _, _, _, _, _, _, _, _)), _)); flatten-list; filter(?ExpAsVar(_, _, _, <id>))> tableExpressions
       ; lateralVertexCorrelations := <collect(vertex-correlates-to-vertex-projected-by-lateral-subquery(|vertices-projected-by-laterals))> tableExpressions
       ; expressions'' := <alltd(dereference-vertex-correlation(|lateralVertexCorrelations))> expressions'

       ; expressions-plus-varRefs := <map(make-expressions-varRefs-tuple)> expressions''
       ; (non-pushed-down-predicates-plus-varRefs, tableExpressions', allNewVariables) := <foldl(try-push-down-predicates(|variablesOuterQuery))> (tableExpressions, (expressions-plus-varRefs, [], []))
       ; non-pushed-down-predicates := <map(?(<id>, _))> non-pushed-down-predicates-plus-varRefs
       ; variablesOuterQuery' := <conc; make-set> (variablesOuterQuery, allNewVariables)
       ; variablesOuterQuery'' := <conc; make-set> (variablesOuterQuery', <?Some(GroupByClause(<id>)); map(?ExpAsVar(_, _, _, <id>)) <+ ![]> groupBy) // add variables from GROUP BY
       ; variablesOuterQuery''' := <conc; make-set> (variablesOuterQuery'', <?SelectClause(_, SelectList(<id>)); map(?ExpAsVar(_, _, _, <id>)) <+ ![]> selectOrModifyClause) // add variables from SELECT

  make-expressions-varRefs-tuple:
    exp -> (exp, offsets)
    with varRefs := <collect(?VarRef(_, <id>))> exp
       // only keep the variable references that refer to variable defintions defined outside of the expression
       // EXISTS and scalar subqueries may define new variables that are referenced, but we don't want to include those
       ; varDefs := <collect-var-def-offsets> exp
       ; offsets := <diff> (varRefs, varDefs)

  try-push-down-predicates(|variablesOuterQuery):
    (t@GraphPattern(vertices, connections, Constraints(valueExpression), None()), (remaining-expressions-plus-varRefs, tableExpressions, allVariablesExceptFromOuterQuery))
      -> (remaining-expressions-plus-varRefs', tableExpressions', allVariablesExceptFromOuterQuery')
    with new-variables := <collect-var-def-offsets-from-graph-pattern> t
       ; visible-variables := <conc; make-set> (variablesOuterQuery, allVariablesExceptFromOuterQuery, new-variables)
       ; (pushed-down-predicates, remaining-expressions-plus-varRefs') := <foldl(try-push-down-predicate(|visible-variables))> (remaining-expressions-plus-varRefs, ([], []))
       ; valueExpression' := <conc> (valueExpression, pushed-down-predicates)
       ; connections' := <alltd(push-down-predicates(|visible-variables))> connections // for quantified path patterns that contain subqueries
       ; constraints' := <alltd(push-down-predicates(|visible-variables))> Constraints(valueExpression')
       ; graphPattern' := GraphPattern(vertices, connections', constraints', None())
       ; tableExpressions' := <conc> (tableExpressions, [graphPattern'])
       ; allVariablesExceptFromOuterQuery' := <conc; make-set> (allVariablesExceptFromOuterQuery, new-variables)

  // We do not push down predicates into OPTIONAL MATCH clauses as that would change the semantic
  try-push-down-predicates(|variablesOuterQuery):
    (t@GraphPattern(_, _, _, Some(OptionalMatchKeyword())), (remaining-expressions-plus-varRefs, tableExpressions, allVariablesExceptFromOuterQuery))
      -> (remaining-expressions-plus-varRefs, tableExpressions', allVariablesExceptFromOuterQuery')
    with new-variables := <collect-var-def-offsets-from-graph-pattern> t
       ; graphPattern' := t
       ; tableExpressions' := <conc> (tableExpressions, [graphPattern'])
       ; allVariablesExceptFromOuterQuery' := <conc; make-set> (allVariablesExceptFromOuterQuery, new-variables)

  try-push-down-predicates(|variablesOuterQuery):
    (
      t@DerivedTable(lateral, Subquery(normalizedQuery@NormalizedQuery(_, selectOrModifyClause, _, _, constraints@Constraints(subquery-constraints), groupByClause, havingClause, _, limitOffsetClauses, _)), correlation)
    , (remaining-expressions-plus-varRefs, tableExpressions, allVariablesExceptFromOuterQuery)
    ) -> (remaining-expressions-plus-varRefs', tableExpressions', allVariablesExceptFromOuterQuery')
    with if <?SelectClause(_, SelectList(expAsVars))> selectOrModifyClause
         then new-variables := <filter(?ExpAsVar(_, _, _, <id>))> expAsVars
            ; if <?LimitOffsetClauses(None(), None())> limitOffsetClauses // if there is a LIMIT (or FETCH FIRST) and/or an OFFSET then we cannot push down any predicate without altering the result, in particular if the subquery has an ORDER BY
              then visible-variables-to-predicates := <conc; make-set> (variablesOuterQuery, allVariablesExceptFromOuterQuery, new-variables)
                 ; (pushed-down-predicates, remaining-expressions-plus-varRefs') := <foldl(try-push-down-predicate(|visible-variables-to-predicates))> (remaining-expressions-plus-varRefs, ([], []))
                 ; pushed-down-predicates' := <alltd(replace-varRef-with-expression(|expAsVars))> pushed-down-predicates
                 ; if <(?CreateOneGroup() + ?Some(GroupByClause(_))); !pushed-down-predicates'; not(?[])> groupByClause // add to HAVING clause if there is a GROUP BY and predicates to pushdown are not empty
                   then constraints' := constraints
                      ; predicate1 := <?[<id>] <+ to-conjunction; !ExpressionPlusType(<id>, BooleanTy())> pushed-down-predicates'
                      ; if <?Some(HavingClause(predicate2))> havingClause
                        then predicate3 := <to-conjunction; !ExpressionPlusType(<id>, BooleanTy())> [predicate2, predicate1]
                           ; havingClause' := <Some(HavingClause(!predicate3))> havingClause
                        else havingClause' := Some(HavingClause(predicate1))
                        end
                   else constraints' := Constraints(<conc> (subquery-constraints, pushed-down-predicates'))
                      ; havingClause' := havingClause
                   end
                 ; normalizedQuery' := <NormalizedQuery(id, id, id, id, !constraints', id, !havingClause', id, id, id)> normalizedQuery
               else normalizedQuery' := normalizedQuery
                  ; remaining-expressions-plus-varRefs' := remaining-expressions-plus-varRefs
               end
            ; visible-variables-to-lateral-query := <conc; make-set> (variablesOuterQuery, allVariablesExceptFromOuterQuery)
            ; normalizedQuery'' := <push-down-predicates(|visible-variables-to-lateral-query)> normalizedQuery'
            ; derivedTable := <origin-track-forced(!DerivedTable(lateral, Subquery(normalizedQuery''), correlation))> t
            ; tableExpressions' := <conc> (tableExpressions, [derivedTable])
            ; allVariablesExceptFromOuterQuery' := <conc; make-set> (allVariablesExceptFromOuterQuery, new-variables)
         else // INSERT / UPDATE / DELETE
              remaining-expressions-plus-varRefs' := remaining-expressions-plus-varRefs
            ; tableExpressions' := <conc> (tableExpressions, [t])
            ; allVariablesExceptFromOuterQuery' := allVariablesExceptFromOuterQuery
         end

  try-push-down-predicate(|variables):
    (t@(exp, vars-in-exp), (pushed-down-predicates, remaining-expressions-plus-varRefs)) -> (pushed-down-predicates', remaining-expressions-plus-varRefs')
    with if <diff; length; ?0> (vars-in-exp, variables)
         then pushed-down-predicates' := <conc> (pushed-down-predicates, [exp]) // can push down
            ; remaining-expressions-plus-varRefs' := remaining-expressions-plus-varRefs
         else pushed-down-predicates' := pushed-down-predicates // cannot push down
            ; remaining-expressions-plus-varRefs' := <conc> (remaining-expressions-plus-varRefs, [t])
         end

  push-down-predicates-for-commonPathExpressions(|variablesOuterQuery) = CommonPathExpressions(map(push-down-predicates-for-commonPathExpressions(|variablesOuterQuery)))

  push-down-predicates-for-commonPathExpressions(|variablesOuterQuery):
    CommonPathExpression(name, vertices, edges, constraints, costClause) -> CommonPathExpression(name, vertices, edges, constraints', costClause')
    with new-variables := <collect-var-def-offsets> (vertices, edges)
       ; visible-variables := <conc; make-set> (variablesOuterQuery, new-variables)
       ; constraints':= <alltd(push-down-predicates(|visible-variables))> constraints
       ; costClause':= <alltd(push-down-predicates(|visible-variables))> costClause

  replace-varRef-with-expression(|expAsVars):
    VarRef(_, v) -> exp
    where exp := <fetch-elem(?ExpAsVar(ExpressionPlusType(<id>, _), _, _, v))> expAsVars

  vertex-correlates-to-vertex-projected-by-lateral-subquery(|vertices-projected-by-laterals):
    t@Vertex(_, _, Correlation(ExpressionPlusType(VarRef(_, v), _)), _) -> t
    where <oncetd(?v)> vertices-projected-by-laterals

  dereference-vertex-correlation(|vertexCorrelations):
    VarRef(identifier, v) -> VarRef(identifier, v')
    where <oncetd(?Vertex(_, v, Correlation(ExpressionPlusType(VarRef(_, v'), _)), _))> vertexCorrelations

rules

  pull-lateral-query-up:
    NormalizedQuery(commonPathExpressions, selectClause, graphName
    , [DerivedTable(lateralOrGraphTable,
        Subquery(
         NormalizedQuery(
              CommonPathExpressions([])
            , SelectClause(
                noneOrStarOrDistinct
              , SelectList(expAsVars)
              )
            , graphName
            , tableExpressions
            , constraints // non-pushed-down constraints
            , None() // no GROUP BY
            , None() // no HAVING
            , None() // no ORDER BY
            , LimitOffsetClauses(None(), None()) //no LIMIT / FETCH FIRST or OFFSET
            , QueryAnnotations(
                [] // no errors
              , pgqlVersion // pgql version of inner query should be the same as outer query (we're using the same variable name below)
              , _
              , _
              , graphTable) // if subquery is a GRAPH_TABLE we want to preserve that info as we need to apply certain checks for GRAPH_TABLE queries
              )
            )
        , None()
        )
      ]
    , Constraints([]) // outer query will not have any non-pushed down constraints if subquery has no LIMIT / FETCH FIRST / OFFSET, like is asserted above already
    , groupBy, having, orderBy, limitOffset
    , queryAnnotations)
    ->
    NormalizedQuery(commonPathExpressions, selectClause', graphName
    , tableExpressions
    , constraints
    , groupBy', having', orderBy', limitOffset
    , queryAnnotations')
    where <not(?Some(Distinct()))> noneOrStarOrDistinct // no DISTINCT
        ; <map(expAsVar-is-referenced(|(selectClause, groupBy, having, orderBy)))> expAsVars // all projected variables from subquery are referenced by outer query
        ; <not(?[])> expAsVars // the inner query has zero columns which is an error; we won't pull up this subquery
    with selectClause' := <replace-varRefs-with-expressions(|expAsVars)> selectClause
       ; groupBy' := <replace-varRefs-with-expressions(|expAsVars)> groupBy
       ; having' := <replace-varRefs-with-expressions(|expAsVars)> having
       ; orderBy' := <replace-varRefs-with-expressions(|expAsVars)> orderBy
       ; queryAnnotations' := <QueryAnnotations(id, id, id, id, !graphTable)> queryAnnotations

  expAsVar-is-referenced(|outer-query-parts):
    ExpAsVar(_, _, _, originOffset) -> <id>
    where <oncetd(?VarRef(_, originOffset))> outer-query-parts

  replace-varRefs-with-expressions(|expAsVars) = alltd(replace-varRef-with-expression(|expAsVars))

  replace-varRef-with-expression(|expAsVars):
    VarRef(_, originOffset) -> exp
    where <collect-one(?ExpAsVar(exp, _, _, originOffset))> expAsVars
