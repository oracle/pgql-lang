module analysis

imports

  libspoofax/core/language
  libspoofax/editor/completion/-

  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-

  names/-
  types/-

  pp
  name-analysis
  normalize
  normalize-after
  type-analysis
  check

rules // Analysis

  pgql-trans:
    ast -> result
    with variable-counter := <new-counter>
       ; result := <normalize-before(|variable-counter)
                  ; add-names(|variable-counter)
                  ; add-types
                  ; normalize-after> ast

  editor-analyze:
    ast -> result
    with variable-counter := <new-counter>
       ; result := <analyze-all( normalize-before(|variable-counter)
                               ; add-names(|variable-counter)
                               ; add-types
                               ; normalize-after
                 , id, id|<language>); reorder-error-messages> ast

  reorder-error-messages = Result([FileResult(id,id,id,reorder-error-messages-helper,id, id)], id, id, id, id)

  // this is needed to make sure errors for unresolved variables occur last such that SPT can be used to check for other types of errors
  reorder-error-messages-helper:
    messages -> messages'
    with unresolved-variables := <filter(?(_,"Unresolved variable"))> messages
       ; other := <remove-all(?(_,"Unresolved variable"))> messages
       ; messages' := <conc> (other, unresolved-variables)

rules // Editor services

  editor-resolve:
    (vertex, _, _, _, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> vertex

  editor-hover:
    (vertex, _, _, _, project-path) -> label
    where
      label := <get-editor-properties(pp-partial-pgql-lang-string|<language>, project-path); properties-to-html> vertex

rules // Debugging

  debug-show-normalized:
    (_, _, ast, path, _) -> (filename, result)
    with
      variable-counter := <new-counter>;
      filename := <guarantee-extension(|"normalized.aterm")> path;
      result   := <normalize-before(|variable-counter)> ast

  debug-show-normalized-with-names:
    (_, _, ast, path, _) -> (filename, result)
    with
      variable-counter := <new-counter>;
      filename := <guarantee-extension(|"normalized.aterm")> path;
      result   := <normalize-before(|variable-counter); add-names(|variable-counter)> ast

  debug-show-normalized-with-types:
    (_, _, ast, path, _) -> (filename, result)
    with
      variable-counter := <new-counter>;
      filename := <guarantee-extension(|"normalized.aterm")> path;
      result   := <normalize-before(|variable-counter); add-names(|variable-counter); add-types> ast

  debug-show-normalized-full:
    (_, _, ast, path, _) -> (filename, result)
    with
      variable-counter := <new-counter>;
      filename := <guarantee-extension(|"normalized.aterm")> path;
      result   := <normalize-before(|variable-counter); add-names(|variable-counter); add-types; normalize-after> ast

  debug-show-analyzed:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast

  debug-index-project =
    analysis-debug-index-project(|<language>)
  debug-index-project-resolve = 
    analysis-debug-index-project-resolve(|<language>)
  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)
  debug-task-partition =
    analysis-debug-task-partition(|<language>)
  debug-task-selection =
    analysis-debug-task-selection(|<language>)
  debug-index-partition-resolve =
    analysis-debug-index-partition-resolve(|<language>)
    
  debug-project =
    analysis-debug-project(|<language>)
  debug-partition =
    analysis-debug-partition(|<language>)
