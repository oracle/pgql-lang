module name-analysis

imports

  stratego/-
  signatures/-
  normalized-signatures
  common
  pp
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-
  names/-

/*
 * 'trans-for-nabl' is called after 'normalize' and transforms the normalized AST into a shape that works for NaBL.
 *
 *  PGQL String -> PGQL AST -> PGQL normalized AST -> PGQL AST for NaBL -> GraphQuery object -> query plan
 */
rules

  add-names(|variable-counter) = is-ddl-statement
              + ?AstPlusMetadata(query, metadata); !AstPlusMetadata(<trans-query(|[], metadata, variable-counter); ?(<id>, _)> query, metadata)
              + ?Start-Plhdr() // for empty query string

rules

  trans-query(|variables, metadata, variable-counter):
    NormalizedQuery(CommonPathExpressions(pathExpressions), selectOrModifyClause, optionalGraphName, tableExpressions, whereClause, groupBy, having, orderBy, limitOffsets, queryAnnotations) ->
        (NormalizedQuery(CommonPathExpressions(pathExpressions'), selectOrModifyClause', optionalGraphName, tableExpressions''', whereClause', groupBy', having', orderBy', limitOffsets, queryAnnotations), variables-in-projection)
    with variables' := <guarantee-size-two-or-more> variables

       // PATH
       ; pathExpressions' := <map(trans-path-expression(|variables', metadata, variable-counter))> pathExpressions

       // these expAsVars are used to make the column aliases in SELECT visible in WHERE and GROUP BY
       ; expAsVars := <?SelectClause(_, SelectList(<id>)) <+ ![]> selectOrModifyClause

       ; (tableExpressions', variables'', valueExpression') := <foldl(trans-table-expression(|metadata, variable-counter, expAsVars))> (tableExpressions, ([], variables', []))

         // WHERE
       ; whereClause' := <resolve-value-expression(|variables'', expAsVars, metadata, variable-counter)> whereClause

       // GROUP BY
       ; if (!groupBy; ?Some(GroupByClause(groupByExps))) + (!selectOrModifyClause; create-one-group(|variables'')) + (!having; ?Some(_))
         then hasGroupBy := True()
            ; (groupBy', variables''') := <resolve-group-by(|variables'', expAsVars, metadata, variable-counter)> groupBy
         else hasGroupBy := False()
            ; (groupBy', variables''') := (groupBy, variables'')
            ; groupByExps := []
         end

       // SELECT / INSERT / UPDATE / DELETE
       ; if <?SelectClause(_, _)> selectOrModifyClause
         then (selectOrModifyClause', variables'''', tableExpressions'') := <resolve-select-clause(|variables''', metadata, variable-counter, valueExpression', tableExpressions', groupByExps, groupBy')> selectOrModifyClause
         else selectOrModifyClause' := <resolve-modify-clause(|variables''', metadata, variable-counter)> selectOrModifyClause
            ; variables'''' := variables'''
            ; tableExpressions'' := tableExpressions'
         end

       ; tableExpressions''' := <map(try(normalize-ANY-paths(|variables'''')))> tableExpressions'' // normalize ANY either to REACHES or SHORTEST

       // HAVING
       ; having' := <resolve-having(|variables''', variables'''', metadata, variable-counter)> having // having resolves to GROUP BY variables first, then to SELECT variables

       // ORDER BY
       // resolve to SELECT variables first, then to GROUP BY variables (except in case of a VarRef in a PropRef, in which case it is resolved to MATCH or GROUP BY first)
       ; orderBy' := < resolve-var-refs(|variables'''', metadata, variable-counter)
                     ; resolve-prop-refs(|variables''', metadata, variable-counter)
                     ; alltd(optimize-order-by)> orderBy

       // variables to pass into subsequent table expressions
       ; variables-in-projection := <diff> (<Hd> variables'''', <Hd> variables''')

  trans-table-expression(|metadata, variable-counter, expAsVars):
    (GraphPattern(vertices, connections, Constraints(valueExpression), optionalMatchKeyword), (result, variables, valueExpressionPriorLateralQueries)) -> (result', variables', valueExpression'')
      with // MATCH
           (vertices', connections') := <alltd(trans-elem(|variables, optionalMatchKeyword))> (vertices, <map(try(trans-rows-per-match-in-path(|variables, optionalMatchKeyword)))> connections)
          ; edges := <filter(?Edge(_, _, _, _, _, _, _) + path-with-singleton-variables)> connections'
          ; paths := <filter(path-with-group-variables)> connections'

          ; new-vars := <conc> (<collect(to-varDef(|variables))> (vertices', edges), <collect(rows-per-match-to-varDef); flatten-list> connections')
          ; new-groupVars := <collect(to-varDef(|variables))> paths
          ; <?[x|[y|ys]]> variables
          ; visible-vars := <replace-or-add-all> (new-vars, x)
          ; visible-groupVars := <replace-or-add-all> (new-groupVars, y)
          ; variables' := [visible-vars|[visible-groupVars|ys]]

          ; connections'' := <alltd(resolve-var-refs-in-path-expression(|variables', metadata, variable-counter))> connections'

          // local WHERE clause for has_label constraints and future inlined constraints
          ; valueExpression' := <resolve-value-expression(|variables', expAsVars, metadata, variable-counter)> valueExpression

          ; graphPattern' := GraphPattern(vertices', connections'', Constraints(valueExpression'), optionalMatchKeyword)
          ; result' := <conc> (result, [graphPattern'])
          ; valueExpression'' := <conc> (valueExpressionPriorLateralQueries, valueExpression') // for SELECT n.* we need to have all the label expression

  trans-table-expression(|metadata, variable-counter, expAsVars):
    (derivedTable@DerivedTable(lateral, subquery@Subquery(normalizedQuery), correlation), (result, variables, valueExpressionPriorLateralQueries)) -> (result', variables', valueExpression')
    with (normalizedQuery', variables-in-projection) := <trans-query(|variables, metadata, variable-counter)> normalizedQuery
       ; subquery' := <origin-track-forced(!Subquery(normalizedQuery'))> subquery
       ; derivedTable' := <origin-track-forced(!DerivedTable(lateral, subquery', correlation))> derivedTable
       ; result' := <conc> (result, [derivedTable'])
       ; <?[x|xs]> variables
       ; variables-in-projection' := <alltd(?ThisQuery(); !LateralQuery())> variables-in-projection
       ; variables' := [<conc> (x, variables-in-projection')|xs]
       ; valueExpression' := <collect(?Constraints(<id>)); concat> derivedTable' // for SELECT n.* we need to have all the label expression

  path-with-singleton-variables:
    t@Path(_, _, _, quantifier, _, _, _, _, _, _) -> t
    where <is-singleton> quantifier

  path-with-group-variables:
    t@Path(_, _, _, quantifier, _, _, _, _, _, _) -> t
    where not( <is-singleton> quantifier )

  guarantee-size-two-or-more = ?[]; ![[], []] <+ ?[x]; ![x, []] <+ id

  trans-elem(|variables, optionalMatchKeyword):
    Vertex(iden@Identifier(v, _)) -> Vertex(iden, origin-offset, correlation, boundedness)
    with origin-offset := <origin-offset> v
       ; correlation := <to-Correlation(|variables)> v
       ; boundedness := <get-boundedness(|variables, optionalMatchKeyword)> iden

  trans-elem(|variables, optionalMatchKeyword):
    NormalizedEdge(src, iden@Identifier(e, _), dst, direction, _, _) -> Edge(src, iden, dst, direction, origin-offset, correlation, boundedness)
    with origin-offset := <origin-offset> e
       ; correlation := <to-Correlation(|variables)> e
       ; boundedness := <get-boundedness(|variables, optionalMatchKeyword)> iden

  to-Correlation(|variables):
    v -> correlation
    with if <Hd; oncetd(?VarDef(Identifier(v, _), _, _, _, _, _, _); ?VarDef(identifier-from-outer-query, origin-position-from-outer-query, _, _, _, _, _))> variables
         then correlation := Correlation(VarRef(identifier-from-outer-query, origin-position-from-outer-query))
         else correlation := None()
         end

  trans-rows-per-match-in-path(|variables, optionalMatchKeyword):
    Path(t1, t2, t3, quantifier, t5, t6, t7, t8, t9, rowsPerMatch) -> Path(t1, t2, t3, quantifier, t5, t6, t7, t8, t9, rowsPerMatch')
    with if <?Some(OptionalMatchKeyword())> optionalMatchKeyword
          then boundednessVertex1 := OptionallyBound()
             ; boundednessRemainder := OptionallyBound()
          else boundednessVertex1 := AlwaysBound()
             ; if <is-optionally-bound> quantifier
               then boundednessRemainder := OptionallyBound()
               else boundednessRemainder := AlwaysBound()
               end
          end
        ; rowsPerMatch' := <?None() + Some(origin-track-forced(translate-rows-per-match(|variables, boundednessVertex1, boundednessRemainder)))> rowsPerMatch

  translate-rows-per-match(|variables, boundednessVertex1, boundednessRemainder) =
    ?OneRowPerVertex(iden@Identifier(v, _)); !OneRowPerVertex(RowsPerMatchVariable(iden, <origin-track-forced(origin-offset)> iden, <to-Correlation(|variables)> v, Type("VERTEX", [boundednessVertex1]))) +
    ?OneRowPerEdge(iden@Identifier(e, _)); !OneRowPerEdge(RowsPerMatchVariable(iden, <origin-track-forced(origin-offset)> iden, <to-Correlation(|variables)> e, Type("EDGE", [boundednessRemainder]))) +
    ?OneRowPerStep(iden1@Identifier(v1, _), iden2@Identifier(e, _), iden3@Identifier(v2, _)); !OneRowPerStep(RowsPerMatchVariable(iden1, <origin-track-forced(origin-offset)> iden1, <to-Correlation(|variables)> v1, Type("VERTEX", [boundednessVertex1])),
                                                                                                             RowsPerMatchVariable(iden2, <origin-track-forced(origin-offset)> iden2, <to-Correlation(|variables)> e, Type("EDGE", [boundednessRemainder])),
                                                                                                             RowsPerMatchVariable(iden3, <origin-track-forced(origin-offset)> iden3, <to-Correlation(|variables)> v2, Type("VERTEX", [boundednessRemainder])))

  rows-per-match-to-varDef = ?RowsPerMatchVariable(iden, origin-offset, _, type); !VarDef(iden, origin-offset, None(), None(), None(), ThisQuery(), type)

  to-varDef(|variables):
    Vertex(iden, origin-offset, _, boundedness) -> VarDef(iden, origin-offset, None(), None(), None(), ThisQuery(), Type("VERTEX", [boundedness]))

  to-varDef(|variables):
    Edge(_, iden, _, _, origin-offset, _, boundedness) -> VarDef(iden, origin-offset, None(), None(), None(), ThisQuery(), Type("EDGE", [boundedness]))

  get-boundedness(|variables, optionalMatchKeyword):
    Identifier(iden, _) -> boundedness
    with if <Hd; fetch-elem(?VarDef(Identifier(iden, _), _, _, _, _, _, Type(_, [existingBoundedness])))> variables
            then // variable was previously declared; take the existing boundedness
                 boundedness := existingBoundedness
            else if <?Some(OptionalMatchKeyword())> optionalMatchKeyword
                 then boundedness := OptionallyBound()
                 else boundedness := AlwaysBound()
                 end
            end

  replace-or-add-all = foldl(replace-or-add)

  replace-or-add:
    (vd@VarDef(Identifier(v, _), _, _, _, _, _, _), varDefs) -> varDefs'
    with if <fetch(?VarDef(Identifier(v, _), _, _, _, _, _, _))> varDefs
         then varDefs' := <conc> (<remove-all(?VarDef(Identifier(v, _), _, _, _, _, _, _))> varDefs, [vd])
         else varDefs' := <conc> (varDefs, [vd])
         end

  resolve-value-expression(|variables, expAsVars, metadata, variable-counter):
    valueExpression -> valueExpression'
    with valueExpression' := <resolve-var-refs-and-use-expAsVarsFromSelectClause(|variables, expAsVars, metadata, variable-counter)> valueExpression

  resolve-group-by(|variables, expAsVarsFromSelectClause, metadata, variable-counter):
    Some(GroupByClause(expAsVars)) -> (Some(GroupByClause(expAsVars')), variables')
    with (expAsVars', vars') := <foldl(resolve-exp-as-var-in-group-by(|variables, expAsVarsFromSelectClause, metadata, variable-counter))> (expAsVars, ([], []))
       ; variables' := [vars'|variables]

  resolve-group-by(|variables, expAsVars, metadata, variable-counter):
    None() -> (CreateOneGroup(), variables')
    with vars' := []
       ; variables' := [vars'|variables]

  resolve-select-clause(|variables, metadata, variable-counter, valueExpression, tableExpressions, group-exps, groupBy):
    t@SelectClause(distinct, t2@SelectList(selectElements)) -> (selectClause', variables', tableExpressions)
    with varsInCurrentScope := <Hd> variables
       ; (selectElements', vars') := <foldl(resolve-exp-as-var-in-select(|variables, metadata, variable-counter, valueExpression, tableExpressions, groupBy))> (selectElements, ([], varsInCurrentScope))
       ; selectElements'' := <origin-track-forced(!SelectList(selectElements'))> t2
       ; variables' := [vars'|<Tl> variables]
       ; selectClause' := <origin-track-forced(!SelectClause(distinct, selectElements''))> t

  resolve-select-clause(|variables, metadata, variable-counter, valueExpression, tableExpressions, group-exps, groupBy):
    t@SelectClause(distinct, star@Star()) -> (selectClause', variables', tableExpressions')
    with if [] := group-exps
         then variable-counter-copy := <new-counter>
            ; <set-counter> (variable-counter-copy, <get-counter> variable-counter) // create a copy of the variable counter as we will use one for references and one for definitions
            ; selectElements := <map(extract-variables-for-select-star(|star, variable-counter)); concat; make-set> tableExpressions
            ; varsInCurrentScope := <Hd> variables
            ; (selectElements', vars') := <foldl(resolve-exp-as-var-in-select(|variables, metadata, variable-counter, valueExpression, tableExpressions, groupBy))> (selectElements, ([], varsInCurrentScope))
            ; variables' := [vars'|<Tl> variables]
            ; star' := star
            ; tableExpressions' := <map(replace-all-AllProperties(|variable-counter-copy))> tableExpressions // replace n.* in LATERAL or GRAPH_TABLE subqueries with a projection of n as we've pulled it up at this point
         else star' := <origin-track-forced(!GroupBySelectStar())> star // can't use GROUP BY in combination with SELECT *, we'll generate an error later
            ; selectElements' := []
            ; variables' := variables
            ; tableExpressions' := tableExpressions
         end
       ; selectList := <origin-track-forced(!SelectList(selectElements'))> star
       ; selectClause' := <origin-track-forced(!SelectClause(star', selectList))> t

  extract-variables-for-select-star(|star, variable-counter) =
      ?GraphPattern(_, _, _, _)
    ; collect-in-outer-query(?Vertex(<id>, _, _, _) + ?Edge(_, <id>, _, _, _, _, _))
    ; filter(is-anonymous-variable)
    ; map(generate-ExpAsVar(|star))

  extract-variables-for-select-star(|star, variable-counter):
    DerivedTable(_, Subquery(NormalizedQuery(_, selectOrModifyClause, _, _, _, _, _, _, _, _)), _) -> vars
    with if <?SelectClause(_, SelectList(selectElems))> selectOrModifyClause
         then vars := <filter(  ?ExpAsVar(_, <id>, _, _); is-anonymous-variable; generate-ExpAsVar(|star) +
                                pull-up-AllProperties(|variable-counter) // no metadata was available to translate the n.* so we pull it up
                             )> selectElems
         else vars := [] // for INSERT/UPDATE/DELETE we return an empty list and will generate an error elsewhere (not allowed as subquery)
         end

  is-anonymous-variable = Identifier(is-string; not(is-substring(GENERATED)), id)

  pull-up-AllProperties(|variable-counter):
    t@AllProperties(VarRef(iden, _), prefix) -> result
    with name := <unique-name(|variable-counter, t)>
       ; identifier := <origin-track-forced(!Identifier(name, name))> t
       ; originOffset := <origin-offset> t
       ; result := <origin-track-forced(!AllProperties(VarRef(identifier, originOffset), prefix))> t

  replace-all-AllProperties(|variable-counter) = ?GraphPattern(_, _, _, _)

  replace-all-AllProperties(|variable-counter) = DerivedTable(id, Subquery(NormalizedQuery(id, replace-AllProperties-in-Select(|variable-counter), id, id, id, id, id, id, id, id)), id)

  replace-AllProperties-in-Select(|variable-counter) = origin-track-forced(SelectClause(id, SelectList(map(try(replace-AllProperties(|variable-counter))))))

  replace-AllProperties-in-Select(|variable-counter) = ?ModifyClause(_) // INSERT/UPDATE/DELETE in LATERAL not supported; we'll generate an error elsewhere

  replace-AllProperties(|variable-counter):
    t@AllProperties(varRef, prefix) -> result
    with name := <unique-name(|variable-counter, t)>
       ; identifier := <origin-track-forced(!Identifier(name, name))> t
       ; originOffset := <origin-offset> t
       ; result := <origin-track-forced(!ExpAsVar(varRef, identifier, NonAnonymous(), originOffset))> t

  resolve-modify-clause(|variables, metadata, variable-counter):
    t@ModifyClause(modifications) -> modifyClause'
    with varsInCurrentScope := <Hd> variables
       ; modifications' := <map(resolve-modification(|variables, metadata, variable-counter))> modifications
       ; modifyClause' := <origin-track-forced(!ModifyClause(modifications'))> t

  resolve-modification(|variables, metadata, variable-counter):
    t@InsertClause(graphName, insertions) -> insertClause'
    with (insertions', _) := <foldl(resolve-insertion(|variables, metadata, variable-counter))> (insertions, ([], variables))
       ; insertClause' := <origin-track-forced(!InsertClause(graphName, insertions'))> t

  resolve-modification(|variables, metadata, variable-counter) = ?UpdateClause(_); resolve-var-refs(|variables, metadata, variable-counter)

  resolve-modification(|variables, metadata, variable-counter) = ?DeleteClause(_); resolve-var-refs(|variables, metadata, variable-counter)

  resolve-insertion(|original-variables, metadata, variable-counter):
    (t, (result, variables)) -> (result', variables')
    where <?VertexInsertion(iden@Identifier(v, _), labels, properties) + ?DirectedEdgeInsertion(iden@Identifier(v, _), src, dst, labels, properties)> t
    with originOffset := <origin-offset> v
       ; properties' := <resolve-set-properties(|v, originOffset, original-variables, metadata, variable-counter)> properties
       ; if <?VertexInsertion(_, _, _)> t
         then insertion := <origin-track-forced(!VertexInsertion(iden, originOffset, labels, properties'))> t
            ; type := Type("VERTEX", [AlwaysBound()])
         else src' := <resolve-var-refs(|variables, metadata, variable-counter)> src
            ; dst' := <resolve-var-refs(|variables, metadata, variable-counter)> dst
            ; insertion := <origin-track-forced(!DirectedEdgeInsertion(iden, originOffset, src', dst', labels, properties'))> t
            ; type := Type("EDGE", [AlwaysBound()])
         end
       ; [vars-in-scope|xs] := variables
       ; vars-in-scope' := <replace-or-add> (VarDef(iden, originOffset, None(), None(), None(), ThisQuery(), type), vars-in-scope)
       ; variables' := [vars-in-scope'|xs]
       ; result' := <conc> (result, [insertion])

  resolve-set-properties(|v, originOffset, original-variables, metadata, variable-counter) = ?None() + Some(Properties(map(resolve-set-property(|v, originOffset, original-variables, metadata, variable-counter))))

  resolve-set-property(|v, originOffset, original-variables, metadata, variable-counter):
    t@SetProperty(PropRef(varRef, prop), exp) -> result
    with varRef' := <?VarRef(Identifier(v, _)); ?VarRef(<id>); !VarRef(<id>, originOffset) <+ resolve-var-refs(|original-variables, metadata, variable-counter)> varRef
       ; exp' :=  <origin-track-forced(resolve-var-refs(|original-variables, metadata, variable-counter))> exp
       ; result := <origin-track-forced(!SetProperty(PropRef(varRef', prop), exp'))> t

  resolve-exp-as-var-in-group-by(|variables, expAsVarsFromSelectClause, metadata, variable-counter):
    (t@ExpAsVar(exp, iden@Identifier(v, _), anonymous), (result, vars)) -> (result', vars')
    with exp' := <resolve-var-refs-and-use-expAsVarsFromSelectClause(|variables, expAsVarsFromSelectClause, metadata, variable-counter)> exp
       ; replaced-groupByExp-with-selectExp := <alltd(?VarRef(<id>, _); !VarRef(<id>))> exp'
       ; originOffset := <origin-offset> v
       ; type := <get-type-from-varRef-as-var(|variables)> exp'
       ; vars' := <replace-or-add> (VarDef(iden, originOffset, exp, replaced-groupByExp-with-selectExp, exp', ThisQuery(), type), vars)
       ; anonymous' := <exp-was-replaced; !NonAnonymous() <+ !anonymous> (exp, replaced-groupByExp-with-selectExp) // SELECT v1 AS v2 FROM MATCH (v1) GROUP BY v2 ==> we want it to be GROUP BY v1 AS v2 not GROUP BY v1
       ; expAsVar' := <origin-track-forced(!ExpAsVar(exp', iden, anonymous', originOffset))> t
       ; result' := <conc> (result, [expAsVar'])

  exp-was-replaced:
    (exp1, exp2) -> <id>
    where <not(eq)> (exp1, exp2)

  resolve-exp-as-var-in-select(|variables, metadata, variable-counter, valueExpression, tableExpressions, groupBy):
    (t@ExpAsVar(exp, iden@Identifier(v, _), anonymous), (result, vars)) -> (result', vars')
    with exp' := <resolve-var-refs(|variables, metadata, variable-counter)> exp
       ; originOffset := <origin-offset> v
       ; if <?Anonymous(); !v; origin-text; ?"*"> anonymous
         then // in case of SELECT * make sure each ExpAsVar gets a unique origin assigned
              unique-origin := <conc-strings> ("*_", <write-to-string> originOffset, "_", <write-to-string> v)
         else unique-origin := originOffset
         end
       ; type := <get-type-from-varRef-as-var(|variables)> exp'
       ; vars' := <replace-or-add> (VarDef(iden, unique-origin, exp, None(), exp', ThisQuery(), type), vars)
       ; expAsVar' := <origin-track-forced(!ExpAsVar(exp', iden, anonymous, unique-origin))> t
       ; result' := <conc> (result, [expAsVar'])

  // expression was defined in GROUP BY and doesn't need to be resolved again
  resolve-exp-as-var-in-select(|variables, metadata, variable-counter, valueExpression, tableExpressions, groupBy):
     (expAsVar@ExpAsVar(_, _, _, originOffset), (result, vars)) -> (result', vars')
     with vars' := vars // it was already added during GROUP BY analysis
        ; result' := <conc> (result, [expAsVar])

  resolve-exp-as-var-in-select(|variables, metadata, variable-counter, valueExpression, tableExpressions, groupBy):
    (t@AllProperties(varRef, columnNamePrefix), (result, vars)) -> (result', vars')
    with varRef' := <try(resolve-var-ref(|variables, metadata, variable-counter))> varRef
       ; if <?VarRef(v)> varRef'
         then selectElems := [ExpAsVar(varRef', v, Anonymous(), None())] // create a dummy ExpAsVar just to make sure an "unresolved variable" error will be generated
            ; vars' := vars
         else if <has-label-metadata> metadata
              then elementType := <get-type-from-varRef-as-var(|variables) <+ !None()> varRef'
                 ; allLabels := <?Type("VERTEX", _); !metadata; fetch-elem(?VertexLabels(<id>)) <+ ?Type("EDGE", _); !metadata; fetch-elem(?EdgeLabels(<id>)) <+ !None()> elementType
              else allLabels := None()
              end
            ; if <?None()> allLabels
              then selectElems := <resolve-var-refs(|variables, metadata, variable-counter)> [t] // no label metadata is provided so we don't process the n.* other than resolve variable n
                 ; vars' := vars
              else originOffset := <get-base-variable(|tableExpressions, groupBy)> varRef'
                 ; labelExpression := <filter(simplify-label-expression(|originOffset)); (?[]; !All() <+ to-label-conjunction)> valueExpression
                 ; allLabelNames := <(?Type("VERTEX", _); get-vertex-labels(|metadata) + ?Type("EDGE", _); get-edge-labels(|metadata)); try(?None(); ![])> elementType
                 ; labelReferences := <get-labels-from-label-expression(|allLabelNames)> labelExpression
                 ; properties := <try(?None(); ![]); filter(fetch-properties-via-label-reference(|labelReferences)); concat> allLabels
                 ; propertyNames := <map(?Property(<id>, _))> properties
                 ; deduplicatedPropertyNames := <make-set-while-preserving-ordering> propertyNames
                 ; selectElems := <map(property-to-exp-as-var(|t, varRef', columnNamePrefix))> deduplicatedPropertyNames
                 ; vars' := <replace-or-add-all> (<map(generated-exp-as-vars-to-varDef(|elementType))> selectElems, vars)
              end
         end
       ; result' := <conc> (result, selectElems)

  get-base-variable(|tableExpressions, groupBy):
    VarRef(_, originOffset) -> originOffset'
    with if <collect-one(?Vertex(_, originOffset, _, _) + ?Edge(_, _, _, _, originOffset, _, _) + ?RowsPerMatchVariable(_, originOffset, _, _))> (tableExpressions, groupBy)
         then originOffset' := originOffset
         else varRef := <collect-one(?ExpAsVar(<id>, _, _, originOffset))> (tableExpressions, groupBy)
            ; originOffset' := <get-base-variable(|tableExpressions, groupBy)> varRef
         end

  get-base-variable(|tableExpressions, groupBy) = ?VarRef(_); !None() // unresolved reference

  has-label-metadata = fetch-elem(?VertexLabels(_))

  generate-ExpAsVar(|star):
    t@Identifier(v, originText) -> expAsVar
    with v' := <origin-track-forced(!(v, ""); conc-strings /* generate a new string to make it loose origin */)> star
       ; originText' := <?None() <+ !star; origin-track-forced(!(originText, ""); conc-strings /* generate a new string to make it loose origin */)> originText
       ; newIdentifier := <origin-track-forced(!Identifier(v', originText'))> star
       ; varRef := <origin-track-forced(!VarRef(newIdentifier))> star
       ; expAsVar := <origin-track-forced(!ExpAsVar(varRef, newIdentifier, Anonymous()))> star

  get-type-from-varRef-as-var(|variables):
    exp -> type
    with if <?VarRef(Identifier(v, _), _)> exp
         then type := <Hd; fetch-elem(?VarDef(Identifier(v, _), _, _, _, _, _, <id>))> variables
         else type := UnknownType()
         end

  property-to-exp-as-var(|originTerm, varRef, columnNamePrefix):
    propertyName -> <origin-track-forced(!ExpAsVar(propRef, columnIdentifier, anonymous, originOffset))> originTerm
    with propIdentifier := Identifier(<origin-track-forced(!propertyName)> originTerm, propertyName)
       ; propRef := PropRef(varRef, propIdentifier)
       ; columnName := <?Some(ColumnNamePrefix(String(<id>))); !(<id>, propertyName); conc-strings <+ !propertyName> columnNamePrefix
       ; columnIdentifier := Identifier(<origin-track-forced(!columnName)> originTerm, columnName)
       ; anonymous := NonAnonymous()
       ; originOffset := <conc-strings> ("*_", <origin-offset; write-to-string> originTerm, "_", propertyName)

  generated-exp-as-vars-to-varDef(|elementType):
    ExpAsVar(propRef, var, anonymous, originOffset) -> VarDef(var, originOffset, None(), None(), propRef, ThisQuery(), elementType)

  resolve-having(|variables-after-group-by, variables-after-select, metadata, variable-counter):
    having -> having'
    with [x|xs] := variables-after-select
       ; [y|_] := variables-after-group-by
       ; z := <replace-or-add-all> (y, x)
       ; variables := [z|xs]
       ; having' := <resolve-var-refs(|variables, metadata, variable-counter)> having

  resolve-var-refs(|variables, metadata, variable-counter) =
      alltd(resolve-var-ref(|variables, metadata, variable-counter))
    ; detect-common-subexpressions(|variables)

  /*
     First try to resolve variables as usual.
     For example, in "SELECT n.prop AS m FROM MATCH (n) -> (m) WHERE m.prop = 123", the "m" in the WHERE clause should reference the "m" in the MATCH clause.
     Only if it fails, try to replace variables with expressions from SELECT before trying to resolve again.
     For example, in "SELECT n.prop AS m FROM MATCH (n) WHERE m.prop = 123", the "m" in the WHERE clause should reference the "m" in the SELECT clause.
     Note that in the final AST, we only want the SELECT to refer to variables in GROUP BY, even though for the user it typically appears like it's the other way arround.
     For example:
        Actual query: SELECT n.age + 2 FROM MATCH (n) GROUP BY n.age + 2
        Final AST:    SELECT generatedVar FROM MATCH (n) GROUP BY n.age + 2 AS generatedVar
     For example:
        Actual query: SELECT (n.age + 2)*(n.age + 2) FROM MATCH (n) GROUP BY n.age + 2
        Final AST:    SELECT generatedVar*generatedVar FROM MATCH (n) GROUP BY n.age + 2 AS generatedVar
     For example:
        Actual query: SELECT n.age + 2 AS v FROM MATCH (n) GROUP BY v
        Final AST:    SELECT v FROM MATCH (n) GROUP BY n.age + 2 AS v
  */
  resolve-var-refs-and-use-expAsVarsFromSelectClause(|variables, expAsVarsFromSelectClause, metadata, variable-counter) =
      alltd-in-outer-query-outside-aggregation( resolve-var-ref-within-query(|variables, expAsVarsFromSelectClause);
                                                try(replace-ref-with-exp(|variables, expAsVarsFromSelectClause, metadata, variable-counter)))
    ; alltd(resolve-var-ref(|variables, metadata, variable-counter)) // now also resolve subqueries and also resolve to variables from outer query
    ; detect-common-subexpressions(|variables)

  detect-common-subexpressions(|variables) =
      alltd(replace-exp-with-ref-within-this-query(|variables) <+ is-subquery <+ is-aggregate)
    ; alltd(replace-exp-with-ref-from-outer-queries(|variables) <+ is-subquery <+ is-aggregate)

  resolve-var-refs-in-path-expression(|variables, metadata, variable-counter):
    t@Path(_, _, _, quantifier, _, _, _, _, _, _) -> t'
    with [_|variables'] := variables
       ; if <is-singleton> quantifier
       then t' := <alltd(resolve-var-ref(|variables, metadata, variable-counter))> t // resolve only to singleton variables
       else t' := <alltd(resolve-var-ref(|variables', metadata, variable-counter) + resolve-var-ref(|variables, metadata, variable-counter))> t // resolve to either group variables or singleton variables
        end

  resolve-var-ref(|variables, metadata, variable-counter):
    t@VarRef(iden@Identifier(v, _)) -> varRef
    with varRef := <
           Hd; fetch(?VarDef(Identifier(v, _), origin-offset, _, _, _, _, _)); !t; origin-track-forced(!VarRef(iden, origin-offset))
           <+ !VarRef(iden)
         > variables

  // within query only, so don't resolve to variables from outer queries
  resolve-var-ref-within-query(|variables, expAsVarsFromSelectClause):
  t@VarRef(iden@Identifier(v, _)) -> varRef
    with varRef := <
           Hd; fetch(?VarDef(Identifier(v, _), origin-offset, _, _, _, ThisQuery(), _)); !VarRef(iden, origin-offset)
           <+ !VarRef(iden)
         > variables

  resolve-var-ref(|variables, metadata, variable-counter):
    t@PropRef(VarRef(iden@Identifier(v, _)), prop) -> PropRef(varRef, prop)
    with varRef := <
           Hd
         ; fetch(?VarDef(Identifier(v, _), origin-offset, original-exp,_ , _, _, _))

          // The original expression needs to be a vertex/edge definition (i.e. ?None()) or a reference to a vertex/edge definition (i.e. ?VarRef(_)).
          // Otherwise, it is a more complex ExpAsVar but we don't want to resolve a VarRef of a PropRef to anything other than a vertex or edge.
          // So, we leave it unresolved for now. Possibly, it will get resolved by "resolve-prop-refs" later.
         ; where ( <?None() + ?VarRef(_)> original-exp )

         ; !VarRef(iden, origin-offset)

        <+ !VarRef(iden)
      > variables

  // MIN, MAX, SUM, AVG, ...
  resolve-var-ref(|variables, metadata, variable-counter):
    aggr -> <origin-track-forced(!aggr')> aggr
    where <is-aggregate> aggr
    with (cons, arguments) := <explode-term> aggr
       ; variables' := <Tl> variables
       ; arguments' :=  <resolve-var-refs(|variables', metadata, variable-counter)> arguments
       ; aggr' := <mkterm> (cons, arguments')

  resolve-var-ref(|variables, metadata, variable-counter):
    Subquery(query) -> Subquery(query')
    with variables' := <alltd(VarDef(id, id, id, id, id, !OuterQuery(), id))> variables
       ; (query', _) := <trans-query(|variables', metadata, variable-counter)> query

  replace-exp-with-ref-within-this-query(|variables):
    exp -> varRef
    where not ( None() := exp )
        ; varRef := <Hd; filter(?VarDef(_, _,_ , _, _, ThisQuery(), _)); fetch-elem(replace-unresolved-exp-with-ref(|exp) + replace-resolved-exp-with-ref-helper(|exp))> variables

  replace-exp-with-ref-from-outer-queries(|variables):
    exp -> varRef
    where not ( None() := exp )
        ; varRef := <Hd; filter(?VarDef(_, _,_ , _, _, OuterQuery(), _)); fetch-elem(replace-unresolved-exp-with-ref(|exp))> variables

  /*
     When the expression could not be resolved, but there is an equivalent expression that we can replace it with.
     For example:
       Actual query: SELECT n.age FROM g MATCH (n) GROUP BY n.age
       Final AST:    SELECT generatedVar FROM g MATCH (n) GROUP BY n.age AS generatedVar
  */
  replace-unresolved-exp-with-ref(|exp) = ?VarDef(iden, origin-offset, original-exp, _, _, _, _); where ( <eq-ignore-case> (exp, original-exp) ); !VarRef(iden, origin-offset)

  /*
     When the expression could not be resolved, but there is an equivalent expression in the SELECT and GROUP BY.
     For example:
       Actual query: SELECT n.age AS nAge MATCH (n) GROUP BY nAge ORDER BY nAge
       Final AST:    SELECT nAge FROM g MATCH (n) GROUP BY n.age AS nAge ORDER BY nAge
  */
  replace-unresolved-exp-with-ref(|exp) = ?VarDef(iden, origin-offset, _, replaced-groupByExp-with-selectExp, _, _, _); where ( <eq-ignore-case> (exp, replaced-groupByExp-with-selectExp) ); !VarRef(iden, origin-offset)

  /*
     When the expression was resolved succesfully, but there is an equivalent expression that we can replace it with.
     For example:
       Actual query: SELECT n.age AS nAge FROM g MATCH (n) ORDER BY n.age
       Final AST:    SELECT n.age AS nAge FROM g MATCH (n) ORDER BY nAge
  */
  replace-resolved-exp-with-ref-helper(|exp) = ?VarDef(iden, origin-offset, _, _, resolved-exp, _, _); where ( <eq-ignore-case> (exp, resolved-exp) ); !VarRef(iden, origin-offset)

  eq-ignore-case = alltd(?Identifier(<id>, _)); eq

  replace-ref-with-exp(|variables, expAsVars, metadata, variable-counter):
    VarRef(Identifier(v, _)) -> resolved-exp
    where exp := <filter(?ExpAsVar(<id>, Identifier(v, _), NonAnonymous())); Hd> expAsVars
    with resolved-exp := <alltd(resolve-var-ref(|variables, metadata, variable-counter))> exp

  resolve-prop-refs(|variables, metadata, variable-counter) = alltd(resolve-prop-ref(|variables, metadata, variable-counter))

  resolve-prop-ref(|variables, metadata, variable-counter):
    t@PropRef(varRef@VarRef(_), prop) -> PropRef(varRef', prop)
    with varRef' := <resolve-var-ref(|variables, metadata, variable-counter)> varRef

  /*
     if the query has no GROUP BY but there are one ore more aggregations in the SELECT, then we generate an
     implicit group, but only if there is no (non-nested) aggregation over a group variable
  */
  create-one-group(|variables):
    t@select-or-modify-clause -> t
    with [vars|[groupVars|_]] := variables
       ; aggregations := <collect-in-outer-query(is-aggregate)> select-or-modify-clause
       ; exps-from-aggregations := <collect(get-exp-from-aggregation)> select-or-modify-clause
       ; varsInAggregations := <collect-in-outer-query-outside-aggregation(varRef-is-visible-var(|vars))> exps-from-aggregations
       ; groupVarsInAggregations := <collect-in-outer-query-outside-aggregation(varRef-is-visible-var(|groupVars))> exps-from-aggregations
       ; groupVarsInAggregations' := <diff> (groupVarsInAggregations, varsInAggregations)
    where not ( [] := aggregations ) // there are aggregations
        ; [] := groupVarsInAggregations' // but no aggregations that involve group variables (not counting nested aggregations)

  varRef-is-visible-var(|visible-vars):
    t@VarRef(Identifier(v, _)) -> t
    where <oncetd(?VarDef(Identifier(v, _), _, _, _, _, _, _))> visible-vars

  trans-path-expression(|variables, metadata, variable-counter):
    CommonPathExpression(name, vertices, edges, valueExpression, costClause) -> CommonPathExpression(name, vertices', edges', valueExpression', costClause')
    with
       // pattern
        (vertices', edges') := <alltd(trans-elem(|variables, None()))> (vertices, edges)
       ; new-vars := <collect(to-varDef(|variables))> (vertices', edges')
       ; <?[x|xs]> variables
       ; visible-vars := <replace-or-add-all> (new-vars, x)

       // WHERE
       ; variables' := [visible-vars|xs]
       ; valueExpression' := <resolve-value-expression(|variables', [], metadata, variable-counter)> valueExpression

       ; costClause' := <resolve-value-expression(|variables', [], metadata, variable-counter)> costClause

  optimize-order-by:
    OrderByClause(elems) -> OrderByClause(elems')
    with elems' := <make-set-while-preserving-ordering> elems // optimization to translate e.g. ORDER BY x, y, x, y into ORDER BY x, y

  normalize-ANY-paths(|variables) = GraphPattern(id, map(try(normalize-ANY-path(|variables))), id, id)

  normalize-ANY-path(|variables):
    Path(src, dst, t@CommonPathExpression(_, Vertices(vertices), Edges(edges), _, _), quantifier, edge, direction, Any(), topKAnyAll, pathMode, rowsPerMatch)
      -> Path(src, dst, t, quantifier, edge, direction, pathFindingGoal, topKAnyAll, pathMode, rowsPerMatch)
    with groupVariables := <conc> (<map(?Vertex(_, <id>, _, _))> vertices, <map(?Edge(_, _, _, _, <id>, _, _))> edges)
       ; references := <Hd; collect(?VarRef(_, <id>))> variables
       ; referencedGroupVariables := <isect> (groupVariables, references)
       ; if <?[]; !rowsPerMatch; (?None() + ?Some(OneRowPerMatch())); !pathMode; ?Walk()> referencedGroupVariables
         then pathFindingGoal := Reaches()
         else pathFindingGoal := Shortest()
         end

rules

  get-labels-from-label-expression(|allLabels):
    labelExpression -> result
    where <is-string> labelExpression
    with result := [labelExpression]

  get-labels-from-label-expression(|allLabels):
    LabelAnd(a, b) -> result
    with result := <get-union-of-labels(|allLabels)> (a, b)

  get-labels-from-label-expression(|allLabels):
    LabelOr(a, b) -> result
    with result := <get-union-of-labels(|allLabels)> (a, b)

  get-union-of-labels(|allLabels):
    (labelExpressionA, labelExpressionB) -> result
    with labelsA := <get-labels-from-label-expression(|allLabels)> labelExpressionA
       ; labelsB := <get-labels-from-label-expression(|allLabels)> labelExpressionB
       ; result := <union> (labelsA, labelsB)

  get-labels-from-label-expression(|allLabels):
    All() -> allLabels

  fetch-properties-via-label-reference(|labelReferences):
    Label(labelName, properties) -> properties
    where <fetch-elem(?labelName)> labelReferences

  fetch-properties-via-label-reference(|labelReferences):
    Label(labelName, properties) -> properties
    where upperCasedLabelName := <upper-case> labelName
        ; <fetch-elem(?upperCasedLabelName)> labelReferences
