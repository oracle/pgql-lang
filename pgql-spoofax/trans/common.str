module common

imports

  signatures/-
  normalized-signatures
  runtime/editor/-
  names/-

rules // normalization of value expressions

  normalize-value-expressions = normalize-value-expressions(|False())

  normalize-value-expressions(|legacyIdentifiersAndStringLiterals) =
    alltd(
      norm-UMin +
      norm-DateTimeField +
      norm-source-destination-predicate
    )
  ; bottomup(try(norm-labeled-predicate))
  ; innermost(
      norm-NOT +
      norm-NEQ +
      norm-isNull +
      norm-case
    )
 ; alltd(norm-datetime-literal);
   if <?False()> legacyIdentifiersAndStringLiterals then alltd(norm-string-literal + norm-identifier) else alltd((?PropRef(_, _) <+ varRef-to-legacy-string-literal) + norm-legacy-string-literal); alltd(norm-legacy-identifier) end

  norm-UMin = ?UMin(Integer(string)); !Integer(<conc-strings> ("-", string))
  norm-UMin = ?UMin(Decimal(string)); !Decimal(<conc-strings> ("-", string))

  norm-NOT = ?Legacy10Not(<id>); !Not(<id>)

  norm-NEQ = ?Neq1(exp1, exp2); !Neq(exp1, exp2)
  norm-NEQ = ?Neq2(exp1, exp2); !Neq(exp1, exp2)

  norm-legacy-string-literal:
    String(s) -> String(s')
    with s' := <origin-track-forced(un-single-quote; unescape-legacy-string-literal)> s

  varRef-to-legacy-string-literal:
    VarRef(DelimitedIdentifier(s)) -> String(s')
    with s' := <origin-track-forced(un-double-quote; unescape-legacy-identifier)> s

  norm-legacy-identifier:
    RegularIdentifier(v) -> Identifier(v, v)

  norm-legacy-identifier:
    DelimitedIdentifier(v) -> Identifier(v', v')
    with v' := <origin-track-forced(un-double-quote; unescape-legacy-identifier)> v

  // (n:'lbl')
  norm-legacy-identifier:
    Legacy10Identifier(v) -> Legacy10Identifier(v')
    with v' := <origin-track-forced(un-single-quote; unescape-legacy-string-literal)> v

  external unescape-legacy-string-literal(|)
  external unescape-legacy-identifier(|)

  norm-datetime-literal = Date(un-single-quote)
                        + Time(un-single-quote)
                        + Timestamp(un-single-quote)
  norm-isNull = ?IsNotNull(exp); origin-track-forced(!IsNull(exp)); !Not(<id>)

  norm-DateTimeField = DateTimeField(origin-track-forced(upper-case))

  norm-case:
    t@SimpleCase(caseOperand, whenClauses, elseClause) -> SimpleCase(caseOperand, whenClauses, elseClause, ifElseRepresentation)
    with ifElseRepresentation := <to-if-else(|t)> (caseOperand, whenClauses, elseClause)

  to-if-else(|origin-term):
    (caseOperand, whenClauses, elseClause) -> ifElse
    with [WhenClause(whenExp, thenExp)|xs] := whenClauses
       ; exp1 := <origin-track-forced(!Eq(caseOperand, whenExp))> whenExp
       ; exp2 := thenExp
       ; if [] := xs
         then exp3 := <to-else> elseClause
         else exp3 := <to-if-else(|elseClause)> (caseOperand, xs, elseClause)
         end
       ; ifElse := <origin-track-forced(!IfElse(exp1, exp2, exp3))> origin-term

  norm-case:
    t@SearchedCase(whenClauses, elseClause) -> ifElse
    with ifElse := <to-if-else(|t)> (whenClauses, elseClause)
       ; <origin-text> t

  to-if-else(|origin-term):
    (whenClauses, elseClause) -> ifElse
    with [WhenClause(whenExp, thenExp)|xs] := whenClauses
       ; exp1 := whenExp
       ; exp2 := thenExp
       ; if [] := xs
         then exp3 := <to-else> elseClause
         else [WhenClause(_, thenExp2)|_] := xs
            ; exp3 := <to-if-else(|thenExp2)> (xs, elseClause)
         end
       ; ifElse := <origin-track-forced(!IfElse(exp1, exp2, exp3))> origin-term

  to-else = ?None(); !Null() <+ ?Some(ElseClause(<id>))

  norm-labeled-predicate:
    LabeledPredicate(varRef, notTerm, labelExpression) -> result
    with labelExpression' := <to-label-constraint(|varRef)> labelExpression
       ; if <?Some(_)> notTerm
         then result := Not(labelExpression')
         else result := labelExpression'
         end

  norm-labeled-predicate:
    FunctionCall(None(), functionName, args@[VarRef(_), String(_)]) -> FunctionCall(None(), Identifier("has_label", origin), args)
    where <norm-identifier; ?Identifier(<id>, origin); lower-case; ?"has_label"> functionName

  to-label-constraint(|varRef):
    labels -> <to-hasLabel-expressions(|varRef)> labels
  to-hasLabel-expressions(|varRef) = bottomup(try(![varRef, <to-label>]; to-function(|"has_label") + origin-track-forced(normalize-label-disjunction)))
  to-label = ?Label(<id>) + ?Legacy10Identifier(<id>); origin-track-forced(!Identifier(<id>, <id>)) + ?BindVariable(_)
  normalize-label-disjunction = ?LabelDisjunction(x, y); !Or(x, y)

  norm-source-destination-predicate:
    t@SourcePredicate(vertexRef, notTerm, edgeRef) -> <origin-track-forced(!result)> t
    with isSourceOfCall := SourceDestinationPredicate(vertexRef, edgeRef, True())
       ; if <?Some(_)> notTerm
         then result := Not(isSourceOfCall)
         else result := isSourceOfCall
         end

  norm-source-destination-predicate:
    t@DestinationPredicate(vertexRef, notTerm, edgeRef) -> <origin-track-forced(!result)> t
    with isDestinationOfCall := SourceDestinationPredicate(vertexRef, edgeRef, False())
       ; if <?Some(_)> notTerm
         then result := Not(isDestinationOfCall)
         else result := isDestinationOfCall
         end
         
rules

  is-literal = is-literal-no-bindVariable
             + ?BindVariable(_)

  is-literal-no-bindVariable = ?Integer(_)
                             + ?Decimal(_)
                             + ?String(_)
                             + ?True() + ?False()
                             + ?Date(_) + ?Time(_) + ?Timestamp(_)

  is-numeric-literal = ?Integer(_) + ?Decimal(_)
  is-boolean-literal = ?True() + ?False()

  is-expression = ?Not(_) + ?And(_, _) + ?Or(_, _) + ?Mul(_, _) + ?Add(_, _) + ?Div(_, _) + ?Mod(_, _) +
        ?Sub(_, _) + ?Eq(_, _) + ?Lt(_, _) + ?Gte(_, _) + ?Lte(_, _) + ?Neq(_, _) + ?Legacy10Regex(_, _)
  is-function = ?Legacy10Id(_) + ?Legacy10Label(_) + ?Legacy10Has(_, _) + ?Legacy10InDegree(_) + ?Legacy10OutDegree(_) + ?Legacy10HasLabel(_, _)

  is-aggregate = ?COUNT(_, _)
               + ?MIN(_, _)
               + ?MAX(_, _)
               + ?SUM(_, _)
               + ?AVG(_, _)
               + ?ARRAY-AGG(_, _)
               + ?JSON-ARRAYAGG(_, _, _, _, _)
               + ?LISTAGG(_, _, _)

  is-quantifier = ?BetweenNAndM(_, _)
                + ?ZeroOrMore()
                + ?OneOrMore()
                + ?Optional()
                + ?ExactlyN(_)
                + ?NOrMore(_)
                + ?BetweenZeroAndM(_)

  get-exp-from-aggregation = ?COUNT(_, <id>)
                           + ?MIN(_, <id>)
                           + ?MAX(_, <id>)
                           + ?SUM(_, <id>)
                           + ?AVG(_, <id>)
                           + ?ARRAY-AGG(_, <id>)
                           + ?JSON-ARRAYAGG(<id>, _, _, _, _)
                           + ?LISTAGG(_, <id>, _)

  unique-name(|c, origin) = !origin; origin-track-forced(!Identifier(<!origin; origin-track-forced(!(<GENERATED>, "_", <next-counter; write-to-string> c); conc-strings)>, None()))

  GENERATED = !"<<anonymous>>"

  VERTEX_WITHOUT_BRACKETS = !"<<vertex-without-brackets>>"

  make-set-while-preserving-ordering = reverse; make-set; reverse

  is-subquery = ?Subquery(_)

  collect-in-outer-query(s) = collect(is-subquery <+ s); remove-all(is-subquery)

  collect-in-outer-query-outside-aggregation(s) = collect(is-subquery <+ is-aggregate <+ s); remove-all(is-subquery + is-aggregate)

  alltd-in-outer-query(s) = alltd(is-subquery <+ s)

  alltd-in-outer-query-outside-aggregation(s) = alltd(is-subquery <+ is-aggregate <+ s)

  get-aggregations = collect-in-outer-query(is-aggregate)

  to-error-message(|message) = !ErrorMessage(<origin-track-forced(origin-text)>, message)

  // just here to get rid of editor errors in e.g. normalize.str
  origin-track-forced(s) = fail
  origin-text = fail
  origin-offset = fail

  is-singleton = ?None() + ?Some(BetweenNAndM("0", "1")); origin-text; ?"?"
  is-optionally-bound = ?Some(BetweenNAndM("0", _))

  is-ddl-statement = is-CreatePropertyGraph + is-DropPropertyGraph + is-CallStatement
  is-CreatePropertyGraph = ?CreatePropertyGraph(_, _, _, _, _)
  is-DropPropertyGraph = ?DropPropertyGraph(_)
  is-CallStatement = ?CallStatement(_, _, _)

  norm-identifier:
    RegularIdentifier(v) -> Identifier(<origin-track-forced(upper-case)> v, v)

  norm-identifier:
    DelimitedIdentifier(v) -> Identifier(v', v')
    with v' := <origin-track-forced(un-double-quote; unescape-delimited-identifier)> v

  unescape-delimited-identifier = string-replace(|"\"\"", "\"")

  norm-string-literal = String(un-single-quote; unescape-string-literal)
  unescape-string-literal = string-replace(|"''", "'")

  to-name-without-case-sensitive-info = origin-track-forced(?Name(None(), Identifier(localName, _)); !Name(None(), localName))
  to-name-without-case-sensitive-info = origin-track-forced(?Name(Some(SchemaName(Identifier(schemaName, _))), Identifier(localName, _)); !Name(schemaName, localName))

  to-conjunction = reverse; !(<Tl>, <Hd>); foldl(to-AND)
  to-AND = ?(exp1, exp2); !And(exp1, exp2)

  to-disjunction = reverse; !(<Tl>, <Hd>); foldl(to-OR)
  to-OR = ?(exp1, exp2); !Or(exp1, exp2)

  to-disjunction-with-types = reverse; !(<Tl>, <Hd>); foldl(to-OR)
  to-OR = ?(exp1, exp2); !ExpressionPlusType(Or(exp1, exp2), Type("BOOLEAN", []))

  conjunction-to-list:
    t@ExpressionPlusType(exp, _) -> result
    with if <?And(exp1, exp2)> exp
         then leftExp := <conjunction-to-list> exp1
            ; rightExp := <conjunction-to-list> exp2
            ; result := <conc> (leftExp, rightExp)
         else result := [t]
         end

  to-function(|name):
    args -> FunctionCall(None(), Identifier(name, name), args)

  simplify-label-expression(|varRefOriginOffset):
    FunctionCall(None(), Identifier(functionName, _), [ VarRef(_, varRefOriginOffset), identifierOrString]) -> label
    where <?"has_label" + ?"HAS_LABEL"> functionName
        ; label := <?Identifier(<id>, _) + ?String(<id>)> identifierOrString

  simplify-label-expression(|varRefOriginOffset):
    Or(a, b) -> LabelOr(a', b')
    where a' := <simplify-label-expression(|varRefOriginOffset)> a
        ; b' := <simplify-label-expression(|varRefOriginOffset)> b

  to-label-conjunction = reverse; !(<Tl>, <Hd>); foldl(to-label-AND)
  to-label-AND = ?(exp1, exp2); !LabelAnd(exp1, exp2)

  get-vertex-labels(|metadata) = !metadata; fetch-elem(?VertexLabels(<id>)); map(?Label(<id>, _)) <+ !None()
  get-edge-labels(|metadata) = !metadata; fetch-elem(?EdgeLabels(<id>)); map(?Label(<id>, _)) <+ !None()

  collect-vars-from-table-expression = ?GraphPattern(vertices, connections, _, _); !(vertices, connections)
                                     ; collect(?Vertex(_, _, None(), _) + ?Edge(_, _, _, _, _, None(), _) + ?RowsPerMatchVariable(_, _, None(), _))
                                     ; collect-om(?Edge(_, Identifier(<id>, _), _, _, _, _, _) <+ ?Identifier(<id>, _), conc)

  collect-vars-from-table-expression:
    DerivedTable(_, Subquery(NormalizedQuery(_, selectOrModifyClause, _, _, _, _, _, _, _, _)), _) -> vars
    with if <?SelectClause(_, SelectList(expAsVars))> selectOrModifyClause
         then vars := <filter(?ExpAsVar(_, Identifier(<id>, _), _, _))> expAsVars
         else vars := [] // will generate an error elsewhere since INSERT/UPDATE/DELETE inside LATERAL is not allowed
         end

  collect-var-def-offsets-from-graph-pattern = ?GraphPattern(vertices, connections, _, _); !(vertices, connections)
                                             ; collect-var-def-offsets

  collect-var-def-offsets = collect(?Vertex(_, <id>, _, _) + ?Edge(_, _, _, _, <id>, _, _) + ?RowsPerMatchVariable(_, <id>, _, _) + ?ExpAsVar(_, _, _, <id>))

  collect-offsets-from-table-expression:
    DerivedTable(_, Subquery(NormalizedQuery(_, SelectClause(_, SelectList(expAsVars)), _, _, _, _, _, _, _, _)), _) -> vars
    with vars := <filter(?ExpAsVar(ExpressionPlusType(VarRef(_, <id>), Type("VERTEX", _)), _, _, _) +
                         ?ExpAsVar(ExpressionPlusType(VarRef(_, <id>), Type("EDGE", _)), _, _, _))> expAsVars

  is-vertex-or-edge-type = ?Type("VERTEX", _) + ?Type("EDGE", _)
