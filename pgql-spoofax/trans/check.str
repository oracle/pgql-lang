module check

imports

  stratego/-
  libspoofax/properties/-
  libspoofax/nabl/-
  libspoofax/task/-
  signatures/-
  normalized-signatures
  common
  names/-
  pp
  runtime/properties/-
  runtime/task/-
  type-analysis

rules // Unresolved/duplicate variables

  nabl-check-disable-unresolved = id
  nabl-check-disable-duplicate(|uri, ns) = id

  nabl-constraint(|ctx):
    query@NormalizedQuery(_, selectClause, _, _, _, group-by, having, order-by, _, _) -> <fail>
    with unresolved-vars := <collect-in-outer-query(?VarRef(<id>))> query
        ; if None() := group-by
          then <batch-generate-error(|ctx, "Unresolved variable")> unresolved-vars
          else unresolved-vars-after-grouping := <collect-in-outer-query-outside-aggregation(?VarRef(<id>))> (selectClause, having, order-by)
             ; other-unresolved-vars := <diff> (unresolved-vars, unresolved-vars-after-grouping)
             ; <batch-generate-error(|ctx, "Unresolved variable")> other-unresolved-vars
             ; if CreateOneGroup() := group-by // aggregation without GROUP BY
               then <batch-generate-error(|ctx, "Unresolved variable (did you mean to use an aggregation?)")> unresolved-vars-after-grouping
               else <batch-generate-error(|ctx, "Unresolved variable (did you mean to use a group key?)")> unresolved-vars-after-grouping
               end
          end

  nabl-constraint(|ctx):
    NormalizedQuery(_, selectOrModifyClauseWithAnnos, _, tableExpressionsWithAnnos, _, groupClauseWithAnnos, _, _, _, _) -> <fail>
    with selectOrModifyClause := <strip-annos> selectOrModifyClauseWithAnnos
       ; tableExpressions := <strip-annos> tableExpressionsWithAnnos
       ; groupClause := <strip-annos> groupClauseWithAnnos
       ; vars := <map(collect-vars-from-table-expression); concat> tableExpressions
       ; if <?Some(_)> groupClause
         then groupVars := <?Some(GroupByClause(<id>)); map(?ExpAsVar(_, Identifier(<id>, _), _, _))> groupClause
         else groupVars := []
         end
       ; <generate-error-on-duplicates(|ctx, "Duplicate variable")> vars
       ; <generate-error-on-duplicates(|ctx, "Duplicate column name in GROUP BY")> groupVars
       ; if <?SelectClause(_, _)> selectOrModifyClause
         then selectVars := <collect-om(?ExpAsVar(_, Identifier(<id>, _), _, _), conc)> selectOrModifyClause // for e.g. SELECT n.age, n.AgE
            ; duplicateSelectVarError := "Duplicate column name in SELECT"
            ; <generate-error-on-duplicates(|ctx, duplicateSelectVarError)> selectVars
            ; selectVarsOriginText := <collect-om(?ExpAsVar(_, Identifier(_, <id>), _, _), conc)> selectOrModifyClause // for e.g. SELECT n.age, n."age"
            ; <generate-error-on-duplicates(|ctx, duplicateSelectVarError)> selectVarsOriginText
            ; insertVars := []
         else // MODIFY query
              insertVars := <collect-om(?VertexInsertion(Identifier(<id>, _), _, _, _) + ?DirectedEdgeInsertion(Identifier(<id>, _), _, _, _, _, _), conc)> selectOrModifyClause
            ; <generate-error-on-duplicates(|ctx, "Duplicate variable in INSERT")> insertVars
            ; updateVars := <collect-om(?Update(ExpressionPlusType(VarRef(Identifier(<id>, _)), _), _) + ?Update(ExpressionPlusType(VarRef(Identifier(<id>, _), _), _), _), conc)> selectOrModifyClause
            ; updates-of-inserts := <isect> (updateVars, insertVars)
            ; <batch-generate-error(|ctx, "Cannot update an element that is being inserted")> updates-of-inserts
            ; deleteVars := <(collect-one(?DeleteClause(<id>)) <+ ![]); filter(?ExpressionPlusType(VarRef(Identifier(<id>, _), _), _))> selectOrModifyClause
            ; sourceVertices := <collect-om(?DirectedEdgeInsertion(_, _, ExpressionPlusType(VarRef(Identifier(<id>, _), _), _), _, _, _), conc)> selectOrModifyClause
            ; destinationVertices := <collect-om(?DirectedEdgeInsertion(_, _, _, ExpressionPlusType(VarRef(Identifier(<id>, _), _), _), _, _), conc)> selectOrModifyClause
            ; all-updateVars := <conc> (updateVars, sourceVertices, destinationVertices)
            ; deletes-of-updates := <isect> (all-updateVars, deleteVars)
            ; <batch-generate-error(|ctx, "Element is deleted in DELETE clause")> deletes-of-updates
         end

       ; if <?Some(_)> groupClause
         then nonAnonymousGroupVars := <?Some(GroupByClause(<id>)); filter(?ExpAsVar(_, Identifier(<id>, _), NonAnonymous(), _))> groupClause
         else nonAnonymousGroupVars := []
         end
       ; redefinitions-in-groupBy := <isect> (nonAnonymousGroupVars, vars)
       ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the FROM clause")> redefinitions-in-groupBy

       ; if <?None()> groupClause
         then redefinition-in-modify := <isect> (insertVars, vars)
            ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the FROM clause")> redefinition-in-modify
         else if <?ModifyClause(_)> selectOrModifyClause
              then redefinitions-in-modify := <isect> (insertVars, nonAnonymousGroupVars)
                 ; <batch-generate-error(|ctx, "Duplicate variable: variable already defined in the GROUP BY clause")> redefinitions-in-modify
              end
         end

  nabl-constraint(|ctx):
    query@NormalizedQuery(_, selectOrModifyClause, _, _, _, _, _, _, _, _) -> <fail>
    with group-variables := <collect-in-outer-query(?CommonPathExpression(_, _, _, _, _); get-origin-positions-of-variables); concat> query
       ; aggregations := <get-aggregations> query
       ; varRefs-per-aggregation := <map(origin-track-forced(collect-in-outer-query(?VarRef(_, <id>)); !Some(<id>)))> aggregations
       ; varRefs-per-aggregation-when-multiple := <filter(has-multiple-groupVarRefs(|group-variables))> varRefs-per-aggregation
       ; <batch-generate-error(|ctx, "Accessing multiple group variables in a single aggregation is not yet supported")> varRefs-per-aggregation-when-multiple

       ; aggregations-contents := <map(get-exp-from-aggregation)> aggregations
       ; nested-aggregations := <map(get-aggregations); concat> aggregations-contents
       ; varRefs-per-nested-aggregation := <map(origin-track-forced(collect-in-outer-query(?VarRef(_, <id>)); !Some(<id>)))> nested-aggregations
       ; varRef-per-nested-aggregation-no-groupVar := <filter(has-no-groupVarRefs(|group-variables))> varRefs-per-nested-aggregation
       ; <batch-generate-error(|ctx, "Nested aggregation not allowed here")> varRef-per-nested-aggregation-no-groupVar

       ; if <?SelectClause(_, SelectList(expAsVars))> selectOrModifyClause
         then aggregations-contents-in-select := <filter(?ExpAsVar(ExpressionPlusType(<get-exp-from-aggregation>, _), _, _, _))> expAsVars
            ; varRefs-per-aggregation-in-select := <map(origin-track-forced(collect-in-outer-query-outside-aggregation(?VarRef(_, <id>)); !Some(<id>)))> aggregations-contents-in-select
            ; varRef-per-aggregation-no-groupVar-in-select := <filter(has-no-groupVarRefs(|group-variables))> varRefs-per-aggregation-in-select
            ; if <gt> (<length> varRefs-per-aggregation-in-select, <length> varRef-per-aggregation-no-groupVar-in-select)
              then <batch-generate-error(|ctx, "Aggregation with group variables expected since SELECT clause has another aggregation with group variables")> varRef-per-aggregation-no-groupVar-in-select
              end
         end

   nabl-constraint(|ctx):
    t@Constraints(_) -> <fail>
    with
      aggregations := <get-aggregations-without-group-variables> t;
      <batch-generate-error(|ctx, "Aggregation without group variables not allowed in WHERE")> aggregations

  nabl-constraint(|ctx):
   t@GroupByClause(_) -> <fail>
    with
      aggregations := <get-aggregations-without-group-variables> t;
      <batch-generate-error(|ctx, "Aggregation without group variables not allowed in GROUP BY")> aggregations

  get-aggregations-without-group-variables = get-aggregations; filter(not(contains-varRef + contains-nested-aggregation))

  contains-varRef = oncetd(?VarRef(_, _))

  contains-nested-aggregation = where (get-exp-from-aggregation; get-aggregations; not(?[]))

  get-origin-positions-of-variables:
    CommonPathExpression(_, Vertices(vertices), Edges(edges), _, _) -> <conc; make-set> (origins-of-vertices, origins-of-edges)
    with origins-of-vertices := <map(?Vertex(_, <id>, _))> vertices
       ; origins-of-edges := <filter(?Edge(_, _, _, _, <id>, _))> edges

  has-multiple-groupVarRefs(|group-variables):
    t@Some(varRefs-in-aggregation) -> t
    where group-varRefs := <isect; not(?[] + ?[_])> (group-variables, varRefs-in-aggregation)

  has-no-groupVarRefs(|group-variables):
    t@Some(varRefs-in-aggregation) -> <id>
    where group-varRefs := <isect; ?[]> (group-variables, varRefs-in-aggregation)

  generate-error-on-duplicates(|ctx, message) = ?vars; map(generate-error-on-duplicate(|ctx, vars, message))

  generate-error-on-duplicate(|ctx, vars, message):
    var -> <id>
    with vars' := <filter(?var)> vars
       ; <try(gt; !var; generate-error(|ctx, message))> (<length> vars', 1)

  nabl-constraint(|ctx):
    SelectClause(Star(), SelectList(selectElements)) -> <fail>
    with group-variables := <filter(get-group-variable-from-select-star)> selectElements
       ; <map(generate-error(|ctx, $[Cannot select all variables since [<id>] is a group variable but group variables cannot be selected]))> group-variables

  get-group-variable-from-select-star = ?ExpAsVar(ExpressionPlusType(VarRef(Identifier(<id>, _)), _), _, _, _); ?v; origin-text; ?"*"; !v

rules // in-lined constraints

  nabl-constraint(|ctx):
    ReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' should be omitted here])> v

  nabl-constraint(|ctx):
    CrossReferenceInInlinedConstraint(v) -> <fail>
    with
      <generate-error(|ctx, $['[v]' is not visible here])> v

rules // vertex in WHERE without rounded brackets

  nabl-constraint(|ctx):
    Vertex(v, _, _) -> <fail>
    where
      <string-ends-with(|<VERTEX_WITHOUT_BRACKETS>)> v
    with
      <generate-error(|ctx, $<Vertices need to be surrounded by brackets: (<<origin-text> v>)>)> v

rules

  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(_, SelectList(selectElements)), _, _, _, groupClause, havingClause, orderByClause, _, _) -> <fail>
    where
      None() := groupClause
    ; [] := <get-aggregations> selectElements // there are no aggregations in the SELECT
    with
      aggregations-in-orderByclause := <get-aggregations> orderByClause
    ; <batch-generate-error(|ctx, "Aggregation in ORDER BY only allowed if SELECT has aggregations")> aggregations-in-orderByclause

  // if SELECT DISTINCT then ORDER BY expressions may only be repetitions of expressions in SELECT
  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(Some(Distinct()), SelectList(selectElements)), _, _, _, _, _, Some(OrderByClause(order-by-elems)), _, _) -> <fail>
    with
      select-vars := <map(?ExpAsVar(_, Identifier(<id>, _), _, _)); strip-annos> selectElements
    ; order-by-expressions := <map(?OrderByElem(<id>, _, _)); strip-annos> order-by-elems
    ; order-by-expressions-not-in-select := <remove-all(?ExpressionPlusType(VarRef(Identifier(<id>, _), _), _); !(<id>, select-vars); elem)> order-by-expressions
    ; <batch-generate-error(|ctx, "Because of DISTINCT projection, the expression in ORDER BY should be one of the expressions in the SELECT")> order-by-expressions-not-in-select

  nabl-constraint(|ctx):
    e@IllegalNull() -> <fail>
    with <generate-error(|ctx, "Use IS NULL or IS NOT NULL")> e

  nabl-constraint(|ctx):
    SelectClause(GroupBySelectStar(), e) -> <fail>
    with <generate-error(|ctx, "SELECT * not allowed in combination with GROUP BY")> e

  nabl-constraint(|ctx):
    NormalizedQuery(_, SelectClause(Star(), e@SelectList([])), _, tableExpressions, _, _, _, _, _, _) -> <fail>
    with if <not(oncetd(?AllProperties(_, _)))> tableExpressions // to allow for parsing and pretty printing when no metadata is available, we only generate the error if no lateral derived table contains an n.* because then we don't know how many elements the SELECT * would have
         then <generate-error(|ctx, "SELECT * not allowed if there are no variables in the graph pattern")> e
         end

  nabl-constraint(|ctx):
    COUNT(Some(Distinct()), e@Star()) -> <fail>
    with <generate-error(|ctx, "* not allowed in combination with DISTINCT")> e

rules // subqueries

  nabl-constraint(|ctx):
    q@NormalizedQuery(_, _, _, _, _, _, _, _, _, _) -> <fail>
    with scalarSubqueries := <collect(?Exists(_) + ?DerivedTable(_, _, _) + ?Subquery(_)); remove-all(?Exists(_) + ?DerivedTable(_, _, _))> q
       ; multiColumnScalarSubqueries := <filter(is-multi-column-subquery)> scalarSubqueries
       ; zeroColumnScalarSubqueries := <filter(is-zero-column-subquery)> scalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery is expected to return a single column, but multiple columns were returned")> multiColumnScalarSubqueries
       ; <batch-generate-error(|ctx, "Scalar subquery is expected to return a single column, but zero columns were returned")> zeroColumnScalarSubqueries

  is-multi-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@SelectList(selectElements)), _, _, _, _, _, _, _, _))
                           ; where( <gt> (<length> selectElements, 1) ); !e

  is-zero-column-subquery = ?Subquery(NormalizedQuery(_, SelectClause(_, e@SelectList(selectElements)), _, _, _, _, _, _, _, _))
                           ; where( <eq> (<length> selectElements, 0) ); !e

  nabl-constraint(|ctx):
    Subquery(NormalizedQuery(_, t@selectOrUpdateClause, _, _, _, _, _, _, _, _)) -> <fail>
    where not ( <?SelectClause(_, _)> selectOrUpdateClause )
    with <generate-error(|ctx, "SELECT clause expected here")> t

  nabl-constraint(|ctx):
    t@NormalizedQuery(_, _, _, _, _, _, _, _, _, QueryAnnotations(_, "v1.3", _, _, _)) -> <fail>
    with nonPgql13Subqueries := <collect(is-non-pgql13-query)> t
       ; <map(get-select-clause); batch-generate-error(|ctx, "Subquery uses older version of PGQL syntax; please make sure that both inner and outer query use the same PGQL version")> nonPgql13Subqueries

  nabl-constraint(|ctx):
    t -> <fail>
    where <is-non-pgql13-query> t
    with pgql13Subqueries := <collect(is-pgql13-query)> t
       ; <map(get-select-clause); batch-generate-error(|ctx, "Subquery uses PGQL 1.3 syntax but outer query does not")> pgql13Subqueries

  is-pgql13-query = ?NormalizedQuery(_, _, _, _, _, _, _, _, _, QueryAnnotations(_, "v1.3", _, _, _))

  is-non-pgql13-query = ?NormalizedQuery(_, _, _, _, _, _, _, _, _,  QueryAnnotations(_, version, _, _, _)); where (!version; not(?"v1.3"))

  get-select-clause = ?NormalizedQuery(_, <id>, _, _, _, _, _, _, _, _)

  nabl-constraint(|ctx):
    ScalarSubquery(Subquery(NormalizedQuery(_, SelectClause(_, SelectList([ExpAsVar(ExpressionPlusType(exp, Type(t)), _, _, _)])), _, _, _, _, _, _, _, _))) -> <fail>
    where <?"VERTEX" + ?"EDGE"> t
    with <generate-error(|ctx, "Scalar subquery not allowed to return a vertex or an edge")> exp

  nabl-constraint(|ctx):
    t@DerivedTable(None(), _, _) -> <fail>
    with <generate-error(|ctx, "LATERAL keyword expected at start of derived table expression")> t

  nabl-constraint(|ctx):
    DerivedTable(_, _, t@Some(_)) -> <fail>
    with <generate-error(|ctx, "Unsupported correlation name for derived table")> t

rules // helper rules

  batch-generate-error(|ctx, m) = map(generate-error(|ctx, m))
    
  generate-error(|ctx, m):
    t -> <id>
    with
      failtask := <task-create-fail(|ctx)>
    ; <task-create-error-on-failure(|ctx, failtask, m)> t

  nabl-constraint(|ctx):
    ErrorMessage(term, m) -> <fail>
    where
      <generate-error(|ctx, m)> term

rules // temporary limitation

  nabl-constraint(|ctx):
    ComplexRegularExpressionNotSupported(edgesOrPaths, pathFindingGoal) -> <fail>
    with [_|[secondEdgeOrPath|_]] := edgesOrPaths
       ; <generate-error-for-multiple-edge-patterns(|ctx, pathFindingGoal)> edgesOrPaths

  nabl-constraint(|ctx):
    ComplexParenthesizedRegularExpressionNotSupported(edges, pathFindingGoal) -> <fail>
    with <generate-error-for-multiple-edge-patterns(|ctx, pathFindingGoal)> edges

  generate-error-for-multiple-edge-patterns(|ctx, pathFindingGoal):
    edgesOrPaths -> <id>
    with if <?All()> pathFindingGoal
         then <generate-error(|ctx, "Not supported: path pattern containing multiple edge patterns in combination with quantifier(s); please split up the pattern into multiple path patterns")> edgesOrPaths
         else <generate-error(|ctx, "Not supported: path pattern containing multiple edge patterns in combination with ANY, SHORTEST or CHEAPEST; try splitting up the pattern into multiple path patterns")> edgesOrPaths
         end

  nabl-constraint(|ctx):
    Path(_, _, _, _, _, _, _, Some(TopK(kValue)), _, _) -> <fail>
    where <?"0"> kValue
    with <generate-error(|ctx, "Value should be greater than 0")> kValue

  nabl-constraint(|ctx):
    Path(_, _, pathExpression, quantifier, _, _, goal, _, _, _) -> <fail>
    where <?Shortest() + ?Cheapest() + ?Any() + ?All()> goal
        ; <?None() + ?Some(BetweenNAndM("0", "1")); origin-text; ?"?"> quantifier
    with error-term := <?Some(_) <+ !pathExpression; collect-one(?Edge(_, _, _, _, _, _))> quantifier 
       ; if <?All()> goal
         then <generate-error(|ctx, "Quantifier of the form {1,4} expected")> error-term
         else <generate-error(|ctx, "Quantifier of the form * or + or {1,4} expected")> error-term
         end

  nabl-constraint(|ctx):
    Path(_, _, pathExpression, quantifier, _, _, goal, _, Walk(), _) -> <fail>
    where <?All()> goal
        ; <?Some(BetweenNAndM(_, "-1"))> quantifier
    with <generate-error(|ctx, "Potentially infinite solutions; specify a selective path-finding goal or a quantifier with upper bound")> quantifier

  nabl-constraint(|ctx):
    t@CommonPathExpression(_, _, connections, _, _) -> <fail>
    where <collect-in-outer-query(?Path(_, _, _, _, _, _, _, _, _, _)); not(?[])> connections
    with <generate-error(|ctx, "Nested regular expressions not supported")> t

  nabl-constraint(|ctx):
    t@LabelDisjunction(_, _) -> <fail>
    with <generate-error(|ctx, "Label disjunction not supported here")> t

rules

  nabl-constraint(|ctx):
    Path(_, _, _, _, Identifier(i, _), _, _, _, _, _) -> <fail>
    where <not(is-substring(GENERATED))> i
    with <generate-error(|ctx, "Path variables not supported")> i

rules // CHEAPEST

  nabl-constraint(|ctx):
    t@Path(_, _, CommonPathExpression(_, _, _, Constraints(constraints), costClause), _, _, _, Cheapest(), _, _, _) -> <fail>
    where <?None()> costClause
    with if <?[]> constraints
    then <generate-error(|ctx, "COST clause expected after pattern")> t
    else <?[<id>]; generate-error(|ctx, "COST clause expected after WHERE clause")> constraints
    end

  nabl-constraint(|ctx):
    t@Path(_, _, CommonPathExpression(_, vertices, edges, _, Some(CostClause(costExpression))), _, _, _, Cheapest(), _, _, _) -> <fail>
    where <?Vertices([Vertex(v1, _, _), Vertex(v2, _, _)])> vertices
        ; <?Edges([Edge(_, e, _, _, _, _)])> edges
    with variablesDefs := [v1, v2, e]
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> costExpression

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t@And(lhs, rhs) -> t
    with <generate-error-on-cross-constraint(|ctx, variablesDefs)> lhs
       ; <generate-error-on-cross-constraint(|ctx, variablesDefs)> rhs

  generate-error-on-cross-constraint(|ctx, variablesDefs):
    t -> t
    where <not(?And(_, _))> t
    with variables := <collect(?VarRef(<id>, _) + ?Vertex(<id>, _, _) + ?Edge(_, <id>, _, _, _, _) + ?Path(_, _, _, _, <id>, _, _, _, _, _))> t
       ; variableRefs := <strip-annos; isect> (variablesDefs, variables)
       ; <try(!(<length> variableRefs, 1); gt; !t; generate-error(|ctx, "Not yet supported: expressions with multiple variables"))> t

  nabl-constraint(|ctx):
    Path(_, _, CommonPathExpression(_, _, _, _, Some(t@CostClause(_))), _, _, _, pathFindingGoal, _, _, _) -> <fail>
    where not ( <?Cheapest()> pathFindingGoal )
    with <generate-error(|ctx, "COST clause only allowed in combination with CHEAPEST")> t

  nabl-constraint(|ctx, metadata):
    CostClause(ExpressionPlusType(exp, type@Type(t))) -> <fail>
    where <get-union-type(|metadata); ?AmbiguousType()> (type, <get-default-decimal-type(|metadata)>)
    with  <generate-error(|ctx, $<COST clause expects a numeric but a <t> was given>)> exp
rules // literals

  external is-invalid-datetime(|)

  nabl-constraint(|ctx):
    datetime-> <fail>
    where <(?Date(_) + ?Time(_) + ?Timestamp(_)); is-invalid-datetime; ?ErrorMessage(_, m)> datetime
    with <generate-error(|ctx, m)> datetime

  nabl-constraint(|ctx):
    t@NormalizedQuery(_, _, _, _, _, _, _, _, _, QueryAnnotations(_, pgqlVersion, _, _, _)) -> <fail>
    where not ( <?"v1.0" + ?"v1.1"> pgqlVersion )
    with <alltd-in-outer-query(check-illegal-java-escaping(|ctx))> t

  check-illegal-java-escaping(|ctx):
    t@String(s) -> <fail>
    where <is-substring(!"\\'")> s
    with <generate-error(|ctx, "Use '' instead of \\' to escape a single quote")> t

  check-illegal-java-escaping(|ctx):
    t@Identifier(identifier, _) -> <fail>
    where <is-substring(!"\\\"")> identifier
    with <generate-error(|ctx, "Use \"\" instead of \\\" to escape a double quote")> t

  nabl-constraint(|ctx):
    DateTimeField(field) -> <fail>
    where <not(?"YEAR" + ?"MONTH" + ?"DAY" + ?"HOUR" + ?"MINUTE" + ?"SECOND")> field
    with <generate-error(|ctx, "Expecting one of YEAR, MONTH, DAY, HOUR, MINUTE, SECOND")> field

  nabl-constraint(|ctx):
    Interval(t@String(value), DateTimeField(field))-> <fail>
    where <is-invalid-datetime-field; ?ErrorMessage(_, m)> (value, field)
    with <generate-error(|ctx, m)> t

  external is-invalid-datetime-field(|)

rules

  nabl-constraint(|ctx) = ?AstPlusMetadata(<id>, metadata)
                        ; alltd(nabl-constraint(|ctx, metadata))
                        ; check-all-GraphTable-restrictions(|ctx)
                        ; check-all-restrictions-outside-GraphTable(|ctx)
                        ; fail

rules // IN predicate and CASE expression

  nabl-constraint(|ctx, metadata):
    inPredicate@InPredicate(exp, Array(valueExpressions)) -> <fail>
    where [x|xs] := valueExpressions
        ; <?ExpressionPlusType(_, Type(t2))> := x
    with // check that type of expression on left-hand of IN is compatible with expression of list elements
         if <?ExpressionPlusType(_, Type(t1)); not(is-compatible-type(|x, metadata))> exp
         then <generate-error(|ctx, $[The IN predicate is undefined for left-hand operand type [t1] and list value type [t2]])> inPredicate
         end

         // check that values in the list are of compatible type
       ; incompatible-expressions := <remove-all(is-compatible-type(|x, metadata))> xs
       ; <map(generate-compatible-type-exepected-error(|ctx, t2))> incompatible-expressions

  generate-compatible-type-exepected-error(|ctx, expectedType) =
    ?ExpressionPlusType(<id>, Type(t));
    generate-error(|ctx, $<Expression of a type compatible with <expectedType> expected but a <t> was given>)

  nabl-constraint(|ctx):
    IfElse(ExpressionPlusType(exp, Type(t)), _, _) -> <fail>
    where <not(?"BOOLEAN")> t
    with <generate-error(|ctx, $<BOOLEAN expected but a <t> was given>)> exp

  nabl-constraint(|ctx, metadata):
   ExpressionPlusType(IfElse(_, ExpressionPlusType(_, type1@Type(t1)), elseExpPlusType@ExpressionPlusType(_, Type(_))), AmbiguousType()) -> <fail>
   with <generate-compatible-type-exepected-error(|ctx, t1)> elseExpPlusType

  nabl-constraint(|ctx):
    SimpleCase(ExpressionPlusType(exp, Type(t)), _, _, _) -> <fail>
    with if <is-unsupported-CASE-type> t
         then <generate-error(|ctx, $[CASE does not allow [t] input])> exp
         end

  nabl-constraint(|ctx):
    IfElse(if, then, else) -> <fail>
    with if <?ExpressionPlusType(thenExp, Type(<id>)); ?thenType; is-unsupported-CASE-type> then
         then <generate-error(|ctx, $[CASE does not allow [thenType] output])> thenExp
         end
       ; if <?ExpressionPlusType(elseExp, Type(<id>)); ?elseType; is-unsupported-CASE-type> else
         then <generate-error(|ctx, $[CASE does not allow [elseType] output])> elseExp
         end

  is-unsupported-CASE-type = ?"VERTEX" + ?"EDGE" + string-starts-with(|"ARRAY<") + string-starts-with(|"SET<")

rules // IS SOURCE OF and IS DESTINATION OF

  nabl-constraint(|ctx):
    SourceDestinationPredicate(ExpressionPlusType(exp1, Type(t1)), ExpressionPlusType(exp2, Type(t2)), _) -> <fail>
    with if <not(?"VERTEX")> t1
         then <generate-error(|ctx, "Vertex reference expected")> exp1
         end
       ; if <not(?"EDGE")> t2
         then <generate-error(|ctx, "Edge reference expected")> exp2
         end

rules // SELECT

  nabl-constraint(|ctx):
    NormalizedQuery(_, t@SelectClause(_, _), _, [], _, _, _, _, _, _) -> <fail>
    with <generate-error(|ctx, "SELECT query without FROM clause not supported")> t

rules // MODIFY

  // e.g. UPDATE x.prop = 123 ... GROUP BY x.prop
  nabl-constraint(|ctx):
    SetProperty(ExpressionPlusType(t@VarRef(_, _), _), _) -> <fail>
    with <generate-error(|ctx, "Cannot set a property that is grouped by")> t

  // setting a property twice, in either UPDATE or INSERT
  nabl-constraint(|ctx):
    properties -> <fail>
    where <?SetProperties(setPropertyExps) + ?Properties(setPropertyExps)> properties
    with propertyRefs := <filter(?SetProperty(ExpressionPlusType(PropRef(_, Identifier(<id>, _)), _), _))> setPropertyExps
       ; duplicatePropertyRefs := <filter(is-elem-contained-more-than-once(|propertyRefs))> propertyRefs
       ; <batch-generate-error(|ctx, "Property is set multiple times")> duplicatePropertyRefs

  is-elem-contained-more-than-once(|elems):
    elem -> <id>
    where duplicates := <filter(?elem)> elems
        ; <gt> (<length>, 1)

  nabl-constraint(|ctx):
    UpdateClause(updates) -> <fail>
    with updateElements := <filter(?Update(ExpressionPlusType(VarRef(Identifier(<id>, _), _), _), _))> updates
       ; duplicateUpdateElements := <filter(is-elem-contained-more-than-once(|updateElements))> updateElements
       ; <batch-generate-error(|ctx, "Element is updated multiple times (merge the two updates together)")> duplicateUpdateElements

  nabl-constraint(|ctx):
    DeleteClause(deletions) -> <fail>
    with deleteElements := <filter(?ExpressionPlusType(VarRef(Identifier(<id>, _), _), _))> deletions
       ; duplicateDeleteElements := <filter(is-elem-contained-more-than-once(|deleteElements))> deleteElements
       ; <batch-generate-error(|ctx, "Element is deleted multiple times")> duplicateDeleteElements

  nabl-constraint(|ctx):
    t -> <fail>
    where <?VertexInsertion(Identifier(v, originText), _, _, Some(Properties(setProperties))) +
           ?DirectedEdgeInsertion(Identifier(v, originText), _, _, _, _, Some(Properties(setProperties))) +
           ?Update(ExpressionPlusType(VarRef(Identifier(v, originText), _), _), SetProperties(setProperties))> t
    with v' := <strip-annos> v
       ; otherVariablesThanV := <filter(?SetProperty(ExpressionPlusType(PropRef(VarRef(Identifier(<id>, _), _), _), _), _); strip-annos; not(?v'))> setProperties
       ; if <eq> (v', <strip-annos> originText)
         then varNameAsString := <origin-text> v
         else varNameAsString := originText // using <origin-text> like above fails SPT tests, thus we avoid using it for unquoted identifier so that we at least can still use unquoted identifiers in INSERT/UPDATE queries in SPT
         end
       ; <batch-generate-error(|ctx, $<Did you mean <varNameAsString>?>)> otherVariablesThanV

  nabl-constraint(|ctx):
    ModifyClause(insertUpdateDeleteClauses) -> <fail>
    with additionalInsertClauses := <filter(?InsertClause(_, _)); try(Tl)> insertUpdateDeleteClauses
       ; additionalUpdateClauses := <filter(?UpdateClause(_)); try(Tl)> insertUpdateDeleteClauses
       ; additionalDeleteClauses := <filter(?DeleteClause(_)); try(Tl)> insertUpdateDeleteClauses
       ; <batch-generate-error(|ctx, "Only a single INSERT clause is allowed per query; use commas to insert multiple elements in a single INSERT clause")> additionalInsertClauses
       ; <batch-generate-error(|ctx, "Only a single UPDATE clause is allowed per query; use commas to update multiple elements in a single UPDATE clause")> additionalUpdateClauses
       ; <batch-generate-error(|ctx, "Only a single DELETE clause is allowed per query; use commas to delete multiple elements in a single DELETE clause")> additionalDeleteClauses

  nabl-constraint(|ctx):
    SetProperty(_, ExpressionPlusType(exp, Type(t))) -> <fail>
    where <?"VERTEX" + ?"EDGE"> t
    with <generate-error(|ctx, "Cannot set the value of a property to a vertex or an edge")> exp

// CREATE PROPERTY GRAPH

  nabl-constraint(|ctx):
    CreatePropertyGraph(_, baseGraphs, VertexTables(vertexTables), EdgeTables(edgeTables), _) -> <fail>
    with elementTableNamesFromBaseGraphs := <collect-om(?BaseElementTable(_, <id>); to-identifier-without-origin-info, conc)> baseGraphs
       ; vertexTableNames := <map(?VertexTable(_, <id>, _, _); to-identifier-without-origin-info)> vertexTables
       ; <generate-error-on-duplicates(|ctx, "Duplicate vertex table name; use an alias to make the vertex table name unique (table AS alias)")> vertexTableNames
       ; edgeTableNames := <map(?EdgeTable(_, <id>, _, _, _, _); to-identifier-without-origin-info)> edgeTables
       ; <generate-error-on-duplicates(|ctx, "Duplicate edge table name; use an alias to make the edge table name unique (table AS alias)")> edgeTableNames
       ; elementTableNames := <conc> (elementTableNamesFromBaseGraphs, <conc; make-set> (vertexTableNames, edgeTableNames))
       ; <generate-error-on-duplicates(|ctx, "Duplicate element table name; use an alias to make the element table name unique (table AS alias)")> elementTableNames

       ; if <?None()> baseGraphs
         then // check for unresolved references from edge tables to vertex tables
              // we only do so if there are no base graphs
              vertexTableReferences := <collect(( ?SourceVertexTable(_, ReferencedVertexTable(Name(_, <id>), _)) +
                                                  ?DestinationVertexTable(_, ReferencedVertexTable(Name(_, <id>), _))
                                                ); to-identifier-without-origin-info)> edgeTables
            ; unresolvedVertexTableReferences := <diff> (vertexTableReferences, vertexTableNames)
            ; <batch-generate-error(|ctx, "Undefined vertex table")> unresolvedVertexTableReferences
         else // check for duplicate base graphs
              baseGraphNames := <?Some(BaseGraphs(<id>)); map(?BaseGraph(<id>, _)); alltd(to-identifier-without-origin-info)> baseGraphs
             ; <generate-error-on-duplicates(|ctx, "Duplicate base graph reference")> baseGraphNames
         end

  to-identifier-without-origin-info = origin-track-forced(?Identifier(localName, _); !localName)

  nabl-constraint(|ctx):
    PropertyExpressions(expAsVars) -> <fail>
    with complexExpressionsWithoutAlias := <remove-all(?ExpAsVar(VarRef(_), _) + ?ExpAsVar(_, Identifier(_, _)))> expAsVars
       ; <batch-generate-error(|ctx, "Alias required (.. AS name)")> complexExpressionsWithoutAlias
       ; propertyNames := <filter(?ExpAsVar(_, Identifier(<id>, _)))> expAsVars
       ; <generate-error-on-duplicates(|ctx, "Duplicate property name")> propertyNames

  nabl-constraint(|ctx):
    ReferencedVertexTable(Name(Some(schemaName), _), _) -> <fail>
    with <generate-error(|ctx, "Schema name not allowed here")> schemaName

  nabl-constraint(|ctx):
    t -> <fail>
    where <?SourceVertexTable(None(), ReferencedVertexTable(_, Some(_))) + ?DestinationVertexTable(None(), ReferencedVertexTable(_, Some(_)))> t
    with <generate-error(|ctx, "Referenced column list provided but no KEY clause specified")> t

// LISTAGG

  nabl-constraint(|ctx):
    LISTAGG(_, _, Some(Separator(separator))) -> <fail>
    where not ( <?String(_)> separator )
    with <generate-error(|ctx, "Only string literals are allowed as separator")> separator

// schema

  nabl-constraint(|ctx):
    AstPlusMetadata(ast, metadata) -> <fail>
    with vertexDefinititions := <collect(?Vertex(_, <id>, _))> ast
       ; vertexLabels := <get-vertex-labels(|metadata)>
       ; if <not(?None())> vertexLabels
         then unresolvedVertexLabels := <collect(get-unresolved-label(|vertexDefinititions, vertexLabels))> ast
            ; <batch-generate-error(|ctx, "Vertex label does not exist")> unresolvedVertexLabels
         end
       ; edgeDefinititions := <collect(?Edge(_, _, _, _, <id>, _))> ast
       ; edgeLabels := <get-edge-labels(|metadata)>
       ; if <not(?None())> edgeLabels
         then unresolvedEdgeLabels := <collect(get-unresolved-label(|edgeDefinititions, edgeLabels))> ast
            ; <batch-generate-error(|ctx, "Edge label does not exist")> unresolvedEdgeLabels
         end

  get-unresolved-label(|varDefinitionOriginOffsets, labels):
    FunctionCall(None(), Identifier(functionName, _), [ ExpressionPlusType(VarRef(_, originOffset), _), identifierOrString ]) -> labelReference
    where <?"has_label" + ?"HAS_LABEL"> functionName
        ; labelReference := <?Identifier(<id>, _) + ?ExpressionPlusType(String(<id>), _)> identifierOrString
        ; <elem> (originOffset, varDefinitionOriginOffsets)
        ; <not(label-exists(|labels))> labelReference

  nabl-constraint(|ctx, metadata):
    VertexInsertion(_, _, Some(Labels(labels)), _) -> <fail>
    where vertexLabels := <get-vertex-labels(|metadata); not(?None())>
    with unresolvedVertexLabels := <map(?Identifier(<id>, _)); remove-all(label-exists(|vertexLabels))> labels
       ; <batch-generate-error(|ctx, "Vertex label does not exist")> unresolvedVertexLabels

  nabl-constraint(|ctx, metadata):
     DirectedEdgeInsertion(_, _, _, _, Some(Labels(labels)), _) -> <fail>
     where edgeLabels := <get-edge-labels(|metadata); not(?None())>
     with unresolvedEdgeLabels := <map(?Identifier(<id>, _)); remove-all(label-exists(|edgeLabels))> labels
        ; <batch-generate-error(|ctx, "Edge label does not exist")> unresolvedEdgeLabels

  label-exists(|labels):
    labelReference -> <id>
    where <elem + elem-when-upper-cased> (labelReference, labels)

  elem-when-upper-cased = (id, map(upper-case)); elem

  nabl-constraint(|ctx):
    ExpressionPlusType(PropRef(_, Identifier(propName, _)), Undefined()) -> <fail>
    with <generate-error(|ctx, $[Property does not exist for any of the labels])> propName

  nabl-constraint(|ctx):
    ExpressionPlusType(PropRef(_, Identifier(propName, _)), AmbiguousType()) -> <fail>
    with <generate-error(|ctx, $[Property has incompatible types for different labels])> propName

  nabl-constraint(|ctx):
    ExpressionPlusType(e@UMin(ExpressionPlusType(_, Type(t))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator - (unary minus) is undefined for the argument type [t]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Not(ExpressionPlusType(_, Type(t))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator NOT is undefined for the argument type [t]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@And(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator AND is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Or(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator OR is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Mul(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator * is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Add(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator + is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Div(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator / is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Mod(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator % is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Sub(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator - is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Eq(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator = is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Neq(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator <> (or !=) is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Gt(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator > is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Lt(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator < is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Gte(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator >= is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Lte(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator <= is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(e@Cct(ExpressionPlusType(_, Type(t1)), ExpressionPlusType(_, Type(t2))), Undefined()) -> <fail>
    with <generate-error(|ctx, $[The operator || is undefined for the argument types [t1], [t2]])> e

  nabl-constraint(|ctx):
    ExpressionPlusType(aggregation, Undefined()) -> <fail>
    where <?SUM(_, ExpressionPlusType(_, Type(t))) +
           ?MIN(_, ExpressionPlusType(_, Type(t))) +
           ?MAX(_, ExpressionPlusType(_, Type(t))) +
           ?AVG(_, ExpressionPlusType(_, Type(t))) +
           ?ARRAY-AGG(_, ExpressionPlusType(_, Type(t))) +
           ?JSON-ARRAYAGG(ExpressionPlusType(_, Type(t)), _, _, _, _) +
           ?LISTAGG(_, ExpressionPlusType(_, Type(t)), _)> aggregation
    with operation := <get-constructor; try(?"ARRAY-AGG"; !"ARRAY_AGG" + ?"JSON-ARRAYAGG"; !"JSON_ARRAYAGG")> aggregation
       ; <generate-error(|ctx, $[The aggregate [operation] is undefined for the argument type [t]])> aggregation

  // check that WHERE clauses contains boolean expressions
  nabl-constraint(|ctx):
    Constraints(constraints) -> <fail>
    where ExpressionPlusType(exp, Type(t)) := <remove-all(?ExpressionPlusType(_, Type("BOOLEAN"))); Hd> constraints
    with <generate-error(|ctx, $<WHERE clause expects a BOOLEAN but a <t> was given>)> exp

  // check that HAVING clauses contains boolean expressions
  nabl-constraint(|ctx):
    HavingClause(ExpressionPlusType(exp, Type(t))) -> <fail>
    where <not(?"BOOLEAN")> t
    with <generate-error(|ctx, $<HAVING clause expects a BOOLEAN but a <t> was given>)> exp

  // check that ORDER BY does not contain vertex/edge/array terms
  nabl-constraint(|ctx):
    OrderByElem(ExpressionPlusType(exp, Type(t)), _, version) -> <fail>
    where <not(?"v1.0")> version
        ; <?"VERTEX" + ?"EDGE" + string-starts-with(|"ARRAY<") + string-starts-with(|"SET<")> t
    with <generate-error(|ctx, $[Cannot order by [t]])> exp

  error-duplicate-var-outer-query = !"Duplicate variable (variable with same name is passed from an outer query)"

  nabl-constraint(|ctx):
    Vertex(Identifier(v, _), _, Correlation(ExpressionPlusType(VarRef(Identifier(outer-var, _), _), type))) -> <fail>
    where <not(?Type("VERTEX"))> type
    with <generate-error(|ctx, <error-duplicate-var-outer-query>)> v

  nabl-constraint(|ctx):
    Edge(_, Identifier(e, _), _, _, _, Correlation(ExpressionPlusType(VarRef(Identifier(outer-var, _), _), type))) -> <fail>
    with <generate-error(|ctx, <error-duplicate-var-outer-query>)> e

  nabl-constraint(|ctx):
    RowsPerMatchVariable(Identifier(v, _), _, Correlation(_), _) -> <fail>
    with <generate-error(|ctx, <error-duplicate-var-outer-query>)> v

  // check SELECT/COLUMNS clause is not empty (may happen in case of SELECT n.*, COLUMNS ( n.* ) or omitting COLUMNS clause)
  nabl-constraint(|ctx):
    t@SelectClause(distinctOrStar, e@SelectList([])) -> <fail>
    where <not(?Star() + ?GroupBySelectStar())> distinctOrStar // for SELECT * (instead of SELECT n.*) with zero columns we already have a different error
    with origin-text := <origin-text; upper-case> t
       ; if <string-starts-with(|"SELECT")> origin-text
         then messsage := "SELECT clause should have at least one column but has zero columns"
         else if <string-starts-with(|"COLUMNS")> origin-text
              then messsage := "COLUMNS clause should have at least one column but has zero columns"
              else if <string-starts-with(|"GRAPH_TABLE")> origin-text
                   then messsage := "GRAPH_TABLE restriction: COLUMNS clause is required"
                   end
              end
         end
       ; <generate-error(|ctx, messsage)> e

  // SUBSTRING
  nabl-constraint(|ctx, metadata):
    CharacterSubstring(ExpressionPlusType(exp, type@Type(t)), _, _) -> <fail>
    where <get-union-type(|metadata); ?AmbiguousType()> (type, <get-default-string-type(|metadata)>)
    with  <generate-error(|ctx, $<Character string expected but a <t> was given>)> exp

  nabl-constraint(|ctx, metadata):
    CharacterSubstring(_, ExpressionPlusType(exp, type@Type(t)), _) -> <fail>
    where <get-union-type(|metadata); ?AmbiguousType()> (type, <get-default-long-integer-type(|metadata)>)
    with  <generate-error(|ctx, $<Numeric expected but a <t> was given>)> exp

  nabl-constraint(|ctx, metadata):
    CharacterSubstring(_, _, Some(StringLength(ExpressionPlusType(exp, type@Type(t))))) -> <fail>
    where <get-union-type(|metadata); ?AmbiguousType()> (type, <get-default-long-integer-type(|metadata)>)
    with  <generate-error(|ctx, $<Numeric expected but a <t> was given>)> exp

  // function calls
  nabl-constraint(|ctx, metadata):
    ExpressionPlusType(exp@FunctionCall(_, _, _), Undefined()) -> <fail>
    with <generate-error(|ctx, "Function does not exist or argument types do not match")> exp

  nabl-constraint(|ctx, metadata):
    ExpressionPlusType(exp@FunctionCall(_, _, _), AmbiguousType()) -> <fail>
    with <generate-error(|ctx, "Multiple functions exist that match the specified function name and argument types")> exp

  nabl-constraint(|ctx, metadata):
    FunctionCall(None(), Identifier("VERTEX_EQUAL", _), [ExpressionPlusType(exp1, t1), ExpressionPlusType(exp2, t2)]) -> <fail>
    with if <not(?Type("VERTEX"))> t1
         then <generate-error(|ctx, "Vertex expected")> exp1
         end
       ; if <not(?Type("VERTEX"))> t2
         then <generate-error(|ctx, "Vertex expected")> exp2
         end

  nabl-constraint(|ctx, metadata):
    FunctionCall(None(), Identifier("EDGE_EQUAL", _), [ExpressionPlusType(exp1, t1), ExpressionPlusType(exp2, t2)]) -> <fail>
    with if <not(?Type("EDGE"))> t1
         then <generate-error(|ctx, "Edge expected")> exp1
         end
       ; if <not(?Type("EDGE"))> t2
         then <generate-error(|ctx, "Edge expected")> exp2
         end

  nabl-constraint(|ctx, metadata):
    FunctionCall(None(), Identifier("VERTEX_ID", _), [ExpressionPlusType(exp, t)]) -> <fail>
    with if <not(?Type("VERTEX"))> t
         then <generate-error(|ctx, "Vertex expected")> exp
         end

  nabl-constraint(|ctx, metadata):
    FunctionCall(None(), Identifier("EDGE_ID", _), [ExpressionPlusType(exp, t)]) -> <fail>
    with if <not(?Type("EDGE"))> t
         then <generate-error(|ctx, "Edge expected")> exp
         end

rules

  check-all-restrictions-outside-GraphTable(|ctx) = alltd(?DerivedTable(Some(GraphTable()), _, _) <+ check-restriction-outside-GraphTable(|ctx))

  // MATCHNUM outside of GRAPH_TABLE
  check-restriction-outside-GraphTable(|ctx):
    e@FunctionCall(None(), Identifier("MATCHNUM", _), []) -> <fail>
    with <generate-error(|ctx, "MATCHNUM without argument not supported unless used inside GRAPH_TABLE")> e

rules // GRAPH_TABLE

  check-all-GraphTable-restrictions(|ctx):
   ast -> ast
   with if <oncetd(?GraphTable())> ast
        then <alltd(check-GraphTable-restriction(|ctx))> ast
        end

  check-GraphTable-restriction(|ctx):
    Vertex(e@Identifier(_, v), _, Correlation(_)) -> <fail>
    with <generate-error(|ctx, $<GRAPH_TABLE restriction: vertex sharing between inner and outer query is not allowed, introduce a new variable name like <v>_new and use WHERE vertex_equal(<v>, <v>_new)>)> e

  check-GraphTable-restriction(|ctx):
    SelectList(elems) -> <fail>
    with <filter(?ExpAsVar(ExpressionPlusType(_, Type("VERTEX")), _, _, _) + ?ExpAsVar(ExpressionPlusType(_, Type("EDGE")), _, _, _)); batch-generate-error(|ctx, "GRAPH_TABLE restriction: cannot project vertex or edge objects")> elems

  check-GraphTable-restriction(|ctx):
    e@FunctionCall(None(), Identifier(functionName, _), [_]) -> <fail>
    where <?"LABEL" + ?"LABELS"> functionName
    with <generate-error(|ctx, "GRAPH_TABLE restriction: cannot use label(..) or labels(..), try using the IS LABELED predicate")> e

  check-GraphTable-restriction(|ctx):
    FunctionCall(None(), Identifier("ALL_DIFFERENT", _), expressionsPlusType) -> <fail>
    with nonGraphElements := <filter(not(?ExpressionPlusType(_, Type("VERTEX")) + ?ExpressionPlusType(_, Type("EDGE"))))> expressionsPlusType
       ; <batch-generate-error(|ctx, "GRAPH_TABLE restriction: ALL_DIFFERENT predicate allows vertex and edge inputs only")> nonGraphElements

  check-GraphTable-restriction(|ctx):
    e@FunctionCall(None(), Identifier("JAVA_REGEXP_LIKE", _), [_, ExpressionPlusType(String(_), _)]) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: JAVA_REGEXP_LIKE is unsupported, please try to use another regexp function if one is available or implement a UDF otherwise")> e

  check-GraphTable-restriction(|ctx):
    e@FunctionCall(None(), Identifier("IN_DEGREE", _), [ExpressionPlusType(_, Type("VERTEX"))]) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: IN_DEGREE not supported, use a subquery instead")> e

  check-GraphTable-restriction(|ctx):
    e@FunctionCall(None(), Identifier("OUT_DEGREE", _), [ExpressionPlusType(_, Type("VERTEX"))]) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: OUT_DEGREE not supported, use a subquery instead")> e

  check-GraphTable-restriction(|ctx):
    e@FunctionCall(None(), Identifier("ID", _), [_]) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: ID not supported, use VERTEX_ID or EDGE_ID instead")> e

  check-GraphTable-restriction(|ctx):
    e@FunctionCall(None(), Identifier("MATCH_NUMBER", _), [_]) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: MATCH_NUMBER not supported, use MATCHNUM instead")> e

  check-GraphTable-restriction(|ctx):
    e@Eq(ExpressionPlusType(exp1, t1), ExpressionPlusType(exp2, _)) -> <fail>
    where <is-vertex-or-edge-type> t1
    with if <?Type("VERTEX")> t1
         then <generate-error(|ctx, $<GRAPH_TABLE restriction: use VERTEX_EQUAL(<<origin-text> exp1>, <<origin-text> exp2>)>)> e
         else <generate-error(|ctx, $<GRAPH_TABLE restriction: use EDGE_EQUAL(<<origin-text> exp1>, <<origin-text> exp2>)>)> e
         end

  check-GraphTable-restriction(|ctx):
    e@Neq(ExpressionPlusType(exp1, t1), ExpressionPlusType(exp2, _)) -> <fail>
    where <is-vertex-or-edge-type> t1
    with if <?Type("VERTEX")> t1
         then <generate-error(|ctx, $<GRAPH_TABLE restriction: use NOT VERTEX_EQUAL(<<origin-text> exp1>, <<origin-text> exp2>)>)> e
         else <generate-error(|ctx, $<GRAPH_TABLE restriction: use NOT EDGE_EQUAL(<<origin-text> exp1>, <<origin-text> exp2>)>)> e
         end

  check-GraphTable-restriction(|ctx):
    CommonPathExpressions(pathMacros) -> <fail>
    with <map(?CommonPathExpression(<id>, _, _, _, _); generate-error(|ctx, "GRAPH_TABLE restriction: path macros not supported"))> pathMacros

  check-GraphTable-restriction(|ctx):
    e@OneRowPerEdge(_) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: ONE ROW PER EDGE not supported, use ONE ROW PER STEP")> e

  // note: UPDATE and DELETE do not need a check since GRAPH_TABLE does not allow for projecting vertex and edges objects (to be updated/deleted) anyway
  check-GraphTable-restriction(|ctx):
    e@InsertClause(_, _) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: INSERT not supported")> e

  check-GraphTable-restriction(|ctx):
    e@ColumnNamePrefix(_) -> <fail>
    with <generate-error(|ctx, "GRAPH_TABLE restriction: PREFIX not supported")> e

  check-GraphTable-restriction(|ctx):
    t -> <fail>
    where exp := <get-exp-from-aggregation; (?ExpressionPlusType(_, Type("VERTEX")) + ?ExpressionPlusType(_, Type("EDGE")))> t
    with <generate-error(|ctx, "GRAPH_TABLE restriction: aggregation does not allow vertex or edge input; use the vertex/edge identifier or a property instead")> exp

  nabl-constraint(|ctx):
    DerivedTable(Some(GraphTable()), Subquery(NormalizedQuery(_, selectClause, _, _, _, CreateOneGroup(), _, _, _, _)), None()) -> <fail>
    with aggregations := <collect(is-aggregate)> selectClause
       ; <batch-generate-error(|ctx, "COLUMNS clause allows only aggregations that access at least one group variable")> aggregations
