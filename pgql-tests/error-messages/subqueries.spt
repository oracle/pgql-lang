module subqueries

language pgql-lang

test Aggregation in subquery and referencing variable from outer query outside of aggregation (1) [[

  SELECT n AS c1
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT COUNT(*) AS cnt, [[n]] AS c2
                  FROM g MATCH (m)
               )

]] error like "Unresolved variable (did you mean to use an aggregation?)" at #1

test Aggregation in subquery and referencing variable from outer query outside of aggregation (2) [[

  SELECT 123 AS c1
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT COUNT(*) AS cnt
                 FROM g MATCH (m)
                 ORDER BY [[n]].prop
               )

]] error like "Unresolved variable (did you mean to use an aggregation?)" at #1

test Reference variable from outer query after GROUP BY (1) [[

  SELECT n AS c1
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT m AS c1
                 FROM g MATCH (m)
                 GROUP BY m
                 ORDER BY [[n]].prop
               )

]] error like "Unresolved variable (did you mean to use a group key?)" at #1

test Reference variable from outer query after GROUP BY (2) [[

  SELECT n AS c1
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT m AS c1
                 FROM g MATCH (m)
                 GROUP BY m
                 ORDER BY [[n]].prop
               )
  GROUP BY n

]] error like "Unresolved variable (did you mean to use a group key?)" at #1

test Reference variable from outer query after GROUP BY (3) [[

  SELECT n AS c1
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT [[n]].prop AS prop
                 FROM g MATCH (m)
                 GROUP BY m
               )
  GROUP BY n

]] error like "Unresolved variable (did you mean to use a group key?)" at #1

test Reference variable from outer query after GROUP BY (4) [[

  SELECT n AS n
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT AVG(m.age) AS avg
                 FROM g MATCH (n) -> (m)
                 GROUP BY m.age AS nAge
                 ORDER BY [[n]].age
               )

]] error like "Unresolved variable (did you mean to use a group key?)" at #1

test Reference variable from outer query after aggregation (1) [[

  SELECT n AS x
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT COUNT(*) AS cnt
                 FROM g MATCH (m)
                 ORDER BY [[x]].prop
               )

]] error like "Unresolved variable (did you mean to use an aggregation?)" at #1

test Reference variable from outer query after aggregation (2) [[

  SELECT n AS c1
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT COUNT(*) AS cnt, [[x]].prop AS prop
                 FROM g MATCH (m)
                 ORDER BY x.prop
               )
  GROUP BY n AS x

]] error like "Unresolved variable (did you mean to use an aggregation?)" at #1

test Reference variable from outer query after aggregation (3) [[

  SELECT n AS n
  FROM g MATCH (n)
  WHERE EXISTS ( SELECT AVG(m.age) AS avg
                 FROM g MATCH (n) -> (m)
                 ORDER BY [[n]].age
               )

]] error like "Unresolved variable (did you mean to use an aggregation?)" at #1

test Variable from outer query not visible in inner query (1) [[

  SELECT COUNT(*) AS cnt
  FROM g MATCH (n) -> (m)
  GROUP BY n
  ORDER BY EXISTS (
             SELECT n AS c1
             FROM g MATCH (n) -> (n)
             WHERE [[m]].age = n.age
           )

]] error like "Unresolved variable" at #1

test Scalar subquery with zero columns (1) [[

  SELECT ( SELECT [[*]] MATCH () ) AS x
  FROM g MATCH (n)

]] error like "Scalar subquery is expected to return a single column, but zero columns were returned" at #1

test Scalar subquery with zero columns (2) [[

  SELECT ( SELECT [[*]] FROM g MATCH () WHERE ( SELECT 1 FROM g MATCH () ) ) AS x
  FROM g MATCH (n)

]] error like "Scalar subquery is expected to return a single column, but zero columns were returned" at #1

test Scalar subquery with zero columns (3) [[

  SELECT ( SELECT 1 FROM g MATCH () WHERE ( SELECT [[*]] FROM g MATCH () ) ) AS x
  FROM g MATCH (n)

]] error like "Scalar subquery is expected to return a single column, but zero columns were returned" at #1

test Scalar subquery with multiple columns (1) [[

  SELECT ( SELECT [[n.prop1 AS p1, n.prop2 AS p2]] FROM g MATCH (n) ) AS x
  FROM g MATCH (n)

]] error like "Scalar subquery is expected to return a single column, but multiple columns were returned" at #1

test Scalar subquery with multiple columns (2) [[

  SELECT ( SELECT 1
           FROM g MATCH (n)
           WHERE ( SELECT [[n.prop1 AS p1, n.prop2 AS p2]] FROM g MATCH (n) )
         ) AS x
  FROM g MATCH (n)

]] error like "Scalar subquery is expected to return a single column, but multiple columns were returned" at #1

test Scalar subquery with multiple columns (3) [[

  SELECT ( SELECT [[n.prop1 AS p1, n.prop2 AS p2]] 
           FROM g MATCH (n)
           WHERE ( SELECT 1 FROM g MATCH (n) )
         ) AS x
  FROM g MATCH (n)

]] error like "Scalar subquery is expected to return a single column, but multiple columns were returned" at #1

test Duplicate variable passed from outer query (1) [[

  SELECT EXISTS ( SELECT e AS c1 FROM g MATCH (n) <-[ [[e]] ]- (m) ) AS x
  FROM g MATCH (n) -[e]-> (m)

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test Duplicate variable passed from outer query (2) [[

  SELECT EXISTS ( SELECT e AS c1 FROM g MATCH ([[e]]) ) AS x
  FROM g MATCH (n) -[e]-> (m)

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test Duplicate variable passed from outer query (3) [[

  SELECT EXISTS ( SELECT e AS c1 FROM g MATCH (n) <-[ [[e]] ]- (m) ) AS x
  FROM g MATCH (n) -[e]-> (m)
  GROUP BY e

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test Duplicate variable passed from outer query (4) [[

  SELECT 123 AS b, e AS c2
  FROM g MATCH (a) -[e]-> ()
  ORDER BY EXISTS ( SELECT 123 AS c FROM g MATCH ([[b]]), ([[e]]) )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1, #2

test Duplicate variable passed from outer query (5) [[

  SELECT 123 AS b, e AS c2, a AS c3
  FROM g MATCH (a) -[e]-> ()
  ORDER BY EXISTS ( SELECT 123 AS c FROM g MATCH () -[ [[b]] ]-> () -[ [[e]] ]-> ()  -[ [[a]] ]-> () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1, #2, #3

test Duplicate variable passed from outer query (6) [[

  SELECT 1 AS n
  FROM g MATCH (n)
  HAVING AVG(n.age) > 3
  ORDER BY ( SELECT 1 AS c1
             FROM g MATCH ( [[n]] ) /* here, "n" from the SELECT of the outer query is visible; rather than overriding it we generate an error */
             WHERE n.age >= 21
           )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test Scalar subquery return vertex or edge [[

  SELECT ( SELECT [[m AS vertex]] FROM g MATCH (m) LIMIT 1 ) AS v1
       , ( SELECT [[e AS edge]] FROM g MATCH () -[e]-> () LIMIT 1 ) AS v3
  FROM g MATCH (n)

]] error like "Scalar subquery not allowed to return a vertex or an edge" at #1, #2

test Duplicate variable from derived table (1) [[

  SELECT *
  FROM MATCH ([[m]])
     , LATERAL ( SELECT [[m]] FROM MATCH (n:University) )

]] error like "Duplicate variable" at #1, #2

test Duplicate variable from derived table (2) [[

  SELECT *
  FROM LATERAL ( SELECT [[n]] FROM MATCH (n:University) )
     , LATERAL ( SELECT [[n]] FROM MATCH (n:University) )

]] error like "Duplicate variable" at #1, #2

test Duplicate variable from derived table (3) [[

  SELECT 1
  FROM LATERAL (
         SELECT n.prop AS [[x]]
         FROM MATCH (n:Person)
         WHERE n.id = 1 )
     , LATERAL (
         SELECT n.prop AS [[x]]
         FROM MATCH (n:Person)
         WHERE n.id = 2 )

]] error like "Duplicate variable" at #1, #2

test Duplicate variable from derived table (4) [[

  SELECT 1
  FROM MATCH (n)
     , LATERAL ( SELECT m FROM MATCH (m) )
  GROUP BY n AS [[m]]

]] error like "Duplicate variable: variable already defined in the FROM clause" at #1

test Duplicate variable from derived table (5) [[

  SELECT 1
  FROM LATERAL ( SELECT m FROM MATCH (m) )
     , MATCH ANY () -[ [[m]] ]->* ()

]] error like "Duplicate variable" at #1

test Derived table without LATERAL keyword not supported [[

  SELECT 1
  FROM [[( SELECT m FROM MATCH (m) )]]

]] error like "LATERAL keyword expected at start of derived table expression" at #1

test Unsupported correlation name for derived table (1) [[

  SELECT 1
  FROM LATERAL ( SELECT n FROM MATCH (n) ) [[t1]]
     , LATERAL ( SELECT m FROM MATCH (m) ) [[AS t2]]

]] error like "Unsupported correlation name for derived table" at #1, #2

test Unsupported correlation name for derived table (2) [[

  SELECT t.name
  FROM LATERAL ( SELECT n.name FROM MATCH (n:Person) ) [[t]]

]] error like "Unsupported correlation name for derived table" at #1

test SELECT * with LATERAL and GROUP BY (1) [[

  SELECT [[*]]
  FROM LATERAL ( SELECT 1, m.* FROM MATCH (m) )
  GROUP BY 1

]] error like "SELECT * not allowed in combination with GROUP BY" at #1

test SELECT * with LATERAL and GROUP BY (2) [[

  SELECT 1
  FROM LATERAL ( SELECT [[*]] FROM MATCH (m) GROUP BY 1 )

]] error like "SELECT * not allowed in combination with GROUP BY" at #1

test SELECT * with LATERAL and GROUP BY (3) [[

  SELECT 1
  FROM LATERAL ( SELECT [[*]] FROM MATCH (m) GROUP BY 1 )

]] error like "SELECT * not allowed in combination with GROUP BY" at #1
