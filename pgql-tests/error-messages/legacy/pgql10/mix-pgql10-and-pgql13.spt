module mix-pgql10-and-pgql13

language pgql-lang

test := [[

    PATH a [[:=]] ()
  SELECT n AS c1
    FROM MATCH (n)

]] error like "Use [AS] instead of [:=]" at #1

test OO-style function call[[

  SELECT [[n.labels()]] AS labels
       , [[e.label()]] AS label
       , [[n.hasLabel('lbl')]] AS hasLabel
       , [[n.id()]] AS id
       , [[n.has('prop1', 'prop2')]] AS has
       , [[n.inDegree()]] AS inDegree
       , [[n.outDegree()]] AS outDegree
    FROM MATCH (n) -[e]-> (m)

]] error like "Use [labels(x)] instead of [x.labels()]" at #1
   error like "Use [label(x)] instead of [x.label()]" at #2
   error like "Use [has_label(x, 'lbl')] instead of [x.hasLabel('lbl')]" at #3
   error like "Use [id(x)] instead of [x.id()]" at #4
   error like "Use [x.prop IS NOT NULL] instead of [x.has(prop)]" at #5
   error like "Use [in_degree(x)] instead of [x.inDegree()]" at #6
   error like "Use [out_degree(x)] instead of [x.outDegree()]" at #7

test Single-quoted labels [[

  SELECT n AS c1
    FROM MATCH (n:[['lbl']])

]] error like "Use double quotes to delimit labels" at #1

test ID testing through @ [[

  SELECT n AS c1
    FROM MATCH (n[[@123]])

]] error like "Use [id(x) = xyz] instead of [@xyz]" at #1

test Constraints in MATCH [[

  SELECT n AS c1
    FROM MATCH (n [[WITH prop = 123]])

]] error like "Constraints should be specified in the WHERE clause instead of the WITH" at #1

test Constraints in MATCH [[

  SELECT n AS c1
    FROM MATCH (n)
   WHERE [[!n.married]]

]] error like "Use [NOT] instead of [!]" at #1

test Constraints in MATCH [[

  SELECT n AS c1
    FROM MATCH (n)
   WHERE [[n.name =~ 'string']]

]] error like "Use [java_regexp_like(exp1, exp2)] instead of [exp1 =~ exp2]" at #1

test MATCH (1) [[

  SELECT n AS c1
  [[FROM g]]
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test MATCH (2) [[

  SELECT n AS c1
   WHERE (n), EXISTS [[( SELECT n AS c1 MATCH (n) )]]

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test MATCH (3) [[

  SELECT n AS c1
   WHERE (n), n.prop = [[( SELECT n.prop AS prop MATCH (n) )]]

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test MATCH (4) [[

    PATH p [[AS]] ()
  SELECT n AS c1
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test MATCH (5) [[

  SELECT [[EXTRACT(MONTH FROM n.dob)]] AS month
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test MATCH (6) [[

  SELECT [[ARRAY_AGG(n.prop)]] AS array
   WHERE (n)

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test MATCH (7) [[

  SELECT n AS c1
   WHERE [[SHORTEST( (n) ->* (m) )]]

]] error like "Use [SELECT .. FROM MATCH .. WHERE ..]" at #1

test PGQL 1.0 subquery in PGQL 1.3 query [[

  SELECT 1 AS c1
    FROM MATCH (n)
   WHERE EXISTS ( [[SELECT 2 AS c2 WHERE (o)]] ) 

]] error like "Subquery uses older version of PGQL syntax; please make sure that both inner and outer query use the same PGQL version" at #1

test PGQL 1.3 subquery in PGQL 1.0 query [[

  SELECT 1 AS c1
    WHERE (n), EXISTS ( [[SELECT 2 AS c2 FROM MATCH (o)]] )

]] error like "Subquery uses PGQL 1.3 syntax but outer query does not" at #1

test PGQL 1.0 derived table in PGQL 1.3 query [[

  SELECT *
    FROM MATCH (n1)
       , [[LATERAL ( SELECT n2 WHERE (n2) )]]

]] error like "Subquery uses older version of PGQL syntax; please make sure that both inner and outer query use the same PGQL version" at #1
