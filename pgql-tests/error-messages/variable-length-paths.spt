module common-path-expressions

language pgql-lang

test Duplicate group variable (1) [[

  SELECT n AS n
    FROM g MATCH
           (n) -[ [[e]] ]-> (m)
         , TOP 10 SHORTEST ( (n) -[ [[e]]:likes]->* (m) )

]] error like "Duplicate variable" at #1, #2

test Duplicate group variable (2) [[

  SELECT n AS n
    FROM g MATCH
           CHEAPEST ( (n) -[ [[e]] ]-> (m) )
         , TOP 10 SHORTEST ( (n) -[ [[e]]:likes]->* (m) )

]] error like "Duplicate variable" at #1, #2

test K equals zero [[

  SELECT n AS c1 FROM g MATCH TOP [[0]] SHORTEST ( (n) ->* (m) )

]]  error like "Value should be greater than 0" at #1

test Multiple edges in SHORTEST (1) [[

  SELECT n.prop AS nProp
  FROM g MATCH ANY SHORTEST ( (n) [[-[e1]->* (m) ->*]] (o) )

]] error like "Not supported: path pattern containing multiple edge patterns in combination with ANY, SHORTEST or CHEAPEST; try splitting up the pattern into multiple path patterns" at #1

test Multiple edges in SHORTEST (2) [[

  SELECT n.prop AS nProp
  FROM g MATCH ALL SHORTEST ( (n) (-[e1]-> () [[-[e2]->)]]* (m) )

]] error like "Not supported: path pattern containing multiple edge patterns in combination with ANY, SHORTEST or CHEAPEST; try splitting up the pattern into multiple path patterns" at #1

test Multiple edges in CHEAPEST (1) [[

  SELECT n.prop AS nProp
    FROM g MATCH ANY CHEAPEST ( (n) [[-[e1]->* (m) ->*]] (o) )

]] error like "Not supported: path pattern containing multiple edge patterns in combination with ANY, SHORTEST or CHEAPEST; try splitting up the pattern into multiple path patterns" at #1

test Multiple edges in CHEAPEST (2) [[

  SELECT n.prop AS nProp
    FROM g MATCH ANY CHEAPEST ( (n) (-[e1]-> () [[-[e2]->)]]* (m) )

]] error like "Not supported: path pattern containing multiple edge patterns in combination with ANY, SHORTEST or CHEAPEST; try splitting up the pattern into multiple path patterns" at #1

test Multiple edges in ALL (1) [[

  SELECT n.prop AS nProp
    FROM g MATCH ALL ( (n) (-[e1]-> () [[-[e2]->)]]* (m) )

]] error like "Not supported: path pattern containing multiple edge patterns in combination with quantifier(s); please split up the pattern into multiple path patterns" at #1

test Multiple edges in ALL (2) [[

  SELECT n.prop AS nProp
    FROM g MATCH ( (n) (-[e1]-> () [[-[e2]->)]]* (m) )

]] error like "Not supported: path pattern containing multiple edge patterns in combination with quantifier(s); please split up the pattern into multiple path patterns" at #1

test Unsupport question mark in SHORTEST [[

  SELECT *
    FROM MATCH ANY SHORTEST ( (n) -[e1]->[[?]] (m) )

]] error like "Quantifier of the form * or + or {1,4} expected" at #1

test No quantifier in SHORTEST [[

  SELECT *
    FROM MATCH ANY SHORTEST ( (n) [[-[e1]-> (m)]] )

]] error like "Quantifier of the form * or + or {1,4} expected" at #1

test Unsupport question mark in CHEAPEST [[

  SELECT *
    FROM MATCH CHEAPEST ( (n) (-[e1]-> COST e1.prop)[[?]] (m) )

]] error like "Quantifier of the form * or + or {1,4} expected" at #1

test No quantifier in CHEAPEST [[

  SELECT *
    FROM MATCH CHEAPEST ( (n) [[(-[e1]-> COST e1.prop)]] (m) )

]] error like "Quantifier of the form * or + or {1,4} expected" at #1

test No quantifier in ANY [[

  SELECT *
    FROM MATCH ANY  (n) [[(-[e1]->)]] (m)

]] error like "Quantifier of the form * or + or {1,4} expected" at #1

test Question mark in ALL [[

  SELECT *
    FROM MATCH ALL (n) -[e1]->[[?]] (m)

]] error like "Quantifier of the form {1,4} expected" at #1

test Potentially infinite solutions (1) [[

  SELECT n AS c1
    FROM g MATCH
           (n) ->[[*]] (m)
         , (n) ->[[+]] (m)
         , (n) ->{2} (m)
         , (n) ->{,2} (m)
         , (n) ->[[{2,}]] (m)
         , (n) -> {2,3} (m)

]] error like "Potentially infinite solutions; specify a selective path-finding goal or a quantifier with upper bound" at #1, #2, #3

test Potentially infinite solutions (2) [[

  SELECT 1
    FROM MATCH ALL (n) -[e1]->[[{1,}]] (m)

]] error like "Potentially infinite solutions; specify a selective path-finding goal or a quantifier with upper bound" at #1

test Potentially infinite solutions (3) [[

  SELECT 1
    FROM MATCH ALL (n) -[e1]->[[+]] (m)

]] error like "Potentially infinite solutions; specify a selective path-finding goal or a quantifier with upper bound" at #1

test Potentially infinite solutions (4) [[

  SELECT 1
    FROM MATCH ALL (n) -[e1]->[[+]] (m)

]] error like "Potentially infinite solutions; specify a selective path-finding goal or a quantifier with upper bound" at #1

test Potentially infinite solutions (5) [[

  SELECT 1
    FROM MATCH WALK (n) -[e1]->[[{2,}]] (m)

]] error like "Potentially infinite solutions; specify a selective path-finding goal or a quantifier with upper bound" at #1

test Duplicate variables (1) [[

  SELECT n.prop AS nProp
    FROM g MATCH
           ANY SHORTEST ( (n) -[ [[e]] ]-> (m) )
         , (n) -[ [[e]] ]-> (m)

]] error like "Duplicate variable" at #1, #2

test Duplicate variables (2) [[

  SELECT n.prop AS nProp
    FROM g MATCH
           ANY SHORTEST ( (n) (-> ([[dst]]))* (m) )
         , ([[dst]])

]] error like "Duplicate variable" at #1, #2

test Duplicate variables (3) [[

  SELECT n.prop AS nProp
    FROM g MATCH ANY SHORTEST ( (n) (-> ([[m]]))* ([[m]]) )

]] error like "Duplicate variable" at #1, #2

test Duplicate variables (4) [[

  SELECT n.prop AS nProp
    FROM g MATCH ANY SHORTEST ( ([[n]]) (-[ [[n]] ]->)* (m) )

]] error like "Duplicate variable" at #1, #2

test Duplicate variables (5) [[

  SELECT n.prop AS nProp
    FROM g MATCH ANY SHORTEST ( (n) [[(-> (m)) (m)]] )

]] error like "Duplicate variable" at #1

test Duplicate variables (6) [[

  SELECT n.prop AS nProp
    FROM g MATCH
           ANY SHORTEST ( (n) -[ [[e]] ]->* (m) )
         , ANY SHORTEST ( (n) -[ [[e]] ]->* (m) )

]] error like "Duplicate variable" at #1, #2

test Duplicate variables (7) [[

  SELECT n.prop AS nProp
    FROM g MATCH
           ANY SHORTEST ( (n) (-> ([[x]]))* (m) )
         , ANY SHORTEST ( (n) -[ [[x]] ]->* (m) )

]] error like "Duplicate variable" at #1, #2

test Duplicate variables (8) [[

  SELECT e AS c1
   FROM g MATCH ANY SHORTEST ( (n) -[e]->* (m) )
   GROUP BY n AS [[e]]

]] error like "Duplicate variable: variable already defined in the FROM clause" at #1

test Duplicate variables (9) [[

  SELECT dst AS c1
    FROM g MATCH ANY SHORTEST ( (n) (-> (dst))* (m) )
   GROUP BY n AS [[dst]]

]] error like "Duplicate variable: variable already defined in the FROM clause" at #1

test Nested regex (1) [[

    [[PATH p AS ANY SHORTEST ( (n) -[e]->* (m) )
  SELECT]] n AS c1
    FROM g MATCH (n)

]] error like "Nested regular expressions not supported" at #1

test Nested regex (2) [[

    [[PATH p AS (n) -/:likes/-> (m)
  SELECT]] n AS c1
    FROM g MATCH (n)

]] error like "Nested regular expressions not supported" at #1

test Reachability in combination with path-finding goal (1) [[

  SELECT n AS c1
  FROM g MATCH ANY SHORTEST ( (n) [[-/:likes/->]]* (m) )

]] error like "Reachability not allowed here since pattern has path-finding goal ANY" at #1

test Reachability in combination with path-finding goal (2) [[

  SELECT n AS c1
  FROM g MATCH ALL SHORTEST ( (n) [[-/:likes/->]]* (m) )

]] error like "Reachability not allowed here since pattern has path-finding goal ALL" at #1

test Nested path-finding goal (1) [[

  SELECT n AS c1
  FROM g MATCH ALL SHORTEST ( [[ANY SHORTEST (]]n) -[e]->* (m) )

]] error like "Nested path-finding goals not allowed" at #1

test Nested path-finding goal (2) [[

  SELECT n AS c1
  FROM g MATCH ANY ( [[ANY (]]n) -[e]->* (m) )

]] error like "Nested path-finding goals not allowed" at #1

test Nested path-finding goal (3) [[

  SELECT n AS c1
  FROM g MATCH ANY ( [[ALL (]]n) -[e]->* (m) )

]] error like "Nested path-finding goals not allowed" at #1

test Multiple group variables in aggregation (1) [[

  SELECT [[MIN(e.prop + x.prop)]] AS aggr1
       , [[MAX(e.prop + x.prop)]] AS aggr2
       , [[COUNT(e.prop + x.prop)]] AS aggr3
       , [[SUM(e.prop + x.prop)]] AS aggr4
       , [[AVG(e.prop + x.prop)]] AS aggr5
       , [[ARRAY_AGG(e.prop + x.prop)]] AS aggr6
       , [[LISTAGG(e.prop + x.prop, ';')]] AS aggr7
    FROM g MATCH ANY SHORTEST ( (n) (-[e]-> (x))* (m) )

]] error like "Accessing multiple group variables in a single aggregation is not yet supported" at #1, #2, #3, #4, #5, #6, #7

test Multiple group variables in aggregation (2) [[

  SELECT [[MIN(e1.prop + e2.prop)]] AS aggr1
       , [[MAX(e1.prop + e2.prop)]] AS aggr2
       , [[COUNT(e1.prop + e2.prop)]] AS aggr3
       , [[SUM(e1.prop + e2.prop)]] AS aggr4
       , [[AVG(e1.prop + e2.prop)]] AS aggr5
       , [[ARRAY_AGG(e1.prop + e2.prop)]] AS aggr6
       , [[LISTAGG(e1.prop + e2.prop, ';')]] AS aggr7
    FROM
      MATCH
        ANY SHORTEST ( (n) -[e1]->* (m) ) ON g,
        ANY SHORTEST ( (n) -[e2]->* (m) ) ON g

]] error like "Accessing multiple group variables in a single aggregation is not yet supported" at #1, #2, #3, #4, #5, #6, #7

test Missing cost clause (1) [[

  SELECT 1 AS c1
    FROM g
   MATCH CHEAPEST ( (n) ([[-[e1]->)]]* (m) )

]] error like "COST clause expected after pattern" at #1

test Missing cost clause (2) [[

  SELECT 1 AS c1
    FROM g
   MATCH CHEAPEST ( (n) (-[e1]-> WHERE [[e1.cost > 0]])* (m) )

]] error like "COST clause expected after WHERE clause" at #1

test Cross constraint in COST clause not yet supported (1) [[

  SELECT 1 AS c1
    FROM g
   MATCH CHEAPEST ( (n) ((src) -[e]-> (dst) COST [[src.prop + dst.prop]])* (m) )

]] error like "Not yet supported: expressions with multiple variables" at #1

test Cross constraint in COST clause not yet supported (2) [[

  SELECT 1 AS c1
    FROM g
   MATCH CHEAPEST ( (n) ((src) -[e]-> (dst) COST [[e.prop + dst.prop]])* (m) )

]] error like "Not yet supported: expressions with multiple variables" at #1

test Cost clause in SHORTEST [[

  SELECT 1 AS c1
    FROM g
   MATCH ANY SHORTEST ( (n) (-[e1]-> [[COST e1.prop]])* (m) )

]] error like "COST clause only allowed in combination with CHEAPEST" at #1

test Label disjunction in path [[

  SELECT 1 AS c1
    FROM MATCH (n) -/:[[likes|dislikes]]*/-> (m)

]] error like "Label disjunction not supported here" at #1

test ONE ROW PER VERTEX no quantifier (1) [[

  SELECT 1
    FROM MATCH (n) [[ONE ROW PER VERTEX (v)]]

]] error like "ONE ROW PER VERTEX or STEP is only supported in combination with an edge pattern and quantifier" at #1

test ONE ROW PER VERTEX no quantifier (2) [[

  SELECT 1
    FROM MATCH ( (n) ) [[ONE ROW PER VERTEX (v)]]

]] error like "ONE ROW PER VERTEX or STEP is only supported in combination with an edge pattern and quantifier" at #1

test ONE ROW PER EDGE no quantifier (1) [[

  SELECT 1
    FROM MATCH (n) [[ONE ROW PER EDGE (v)]]

]] error like "ONE ROW PER VERTEX or STEP is only supported in combination with an edge pattern and quantifier" at #1

test ONE ROW PER EDGE no quantifier (2) [[

  SELECT 1
    FROM MATCH (n) [[-> (]]m) ONE ROW PER EDGE (e)

]] error like "Quantifier of the form {1,4} expected" at #1

test ONE ROW PER STEP no quantifier (1) [[

  SELECT 1
    FROM MATCH (n) [[ONE ROW PER STEP (v1, e, v2)]]

]] error like "ONE ROW PER VERTEX or STEP is only supported in combination with an edge pattern and quantifier" at #1

test ONE ROW PER STEP no quantifier (2) [[

  SELECT 1
    FROM MATCH (n) [[-> (]]m) ONE ROW PER STEP (v1, e, v2)

]] error like "Quantifier of the form {1,4} expected" at #1

test ONE ROW PER STEP no quantifier (3) [[

  SELECT 1
    FROM MATCH ( any (n) -> (m), (m2) -> (o) ) [[ONE ROW PER STEP (v1, e, v2)]]

]] error like "ONE ROW PER VERTEX or STEP is only permitted if the MATCH clause contains a single path pattern" at #1

test ONE ROW PER VERTEX with multiple path patterns [[

  SELECT 1
    FROM MATCH ( ANY (a) ->* (b), ANY (b) ->* (c) ) [[ONE ROW PER VERTEX (v)]]

]] error like "ONE ROW PER VERTEX or STEP is only permitted if the MATCH clause contains a single path pattern" at #1

test ONE ROW PER EDGE with multiple path patterns [[

  SELECT 1
    FROM MATCH ( ANY (a) ->* (b), ANY (b) ->* (c) ) [[ONE ROW PER EDGE (e)]]

]] error like "ONE ROW PER VERTEX or STEP is only permitted if the MATCH clause contains a single path pattern" at #1

test ONE ROW PER STEP with multiple path patterns [[

  SELECT 1
    FROM MATCH ( ANY (a) ->* (b), ANY (b) ->* (c) ) [[ONE ROW PER STEP (v1, e, v2)]]

]] error like "ONE ROW PER VERTEX or STEP is only permitted if the MATCH clause contains a single path pattern" at #1

test ONE ROW PER with multiple path patterns and ON clause [[

  SELECT 1
    FROM MATCH ( ANY (a) ->* (b), ANY (b) ->* (c) ) ON g [[ONE ROW PER STEP (v1, e, v2)]]

]] error like "ONE ROW PER VERTEX or STEP is only permitted if the MATCH clause contains a single path pattern" at #1

test ONE ROW PER VERTEX duplicate variable (1) [[

  SELECT 1
    FROM MATCH ANY (a) -[e]-> ([[b]]) ONE ROW PER VERTEX ([[b]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER VERTEX duplicate variable (2) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]-> (b) ONE ROW PER VERTEX ([[e]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER VERTEX duplicate variable (3) [[

  SELECT 1
    FROM MATCH ANY (a) (-[e]-> ([[x]]))* (b) ONE ROW PER VERTEX ([[x]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER VERTEX duplicate variable (4) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]->* (b) ONE ROW PER VERTEX ([[e]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER VERTEX duplicate variable (5) [[

    SELECT 1
      FROM MATCH ANY (a) -[e]->* (b) ONE ROW PER VERTEX (v)
  GROUP BY a.prop AS [[v]]

]] error like "Duplicate variable: variable already defined in the FROM clause" at #1

test ONE ROW PER EDGE duplicate variable (1) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]-> (b) ONE ROW PER EDGE ([[e]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER EDGE duplicate variable (2) [[

  SELECT 1
    FROM MATCH ANY (a) -[e]-> ([[b]]) ONE ROW PER EDGE ([[b]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER EDGE duplicate variable (3) [[

  SELECT 1
    FROM MATCH ANY (a) (-[e]-> ([[x]]))* (b) ONE ROW PER EDGE ([[x]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER EDGE duplicate variable (4) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]->* (b) ONE ROW PER EDGE ([[e]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER EDGE duplicate variable (5) [[

    SELECT 1
      FROM MATCH ANY (a) ->* (b) ONE ROW PER EDGE (e)
  GROUP BY a.prop AS [[e]]

]] error like "Duplicate variable: variable already defined in the FROM clause" at #1

test ONE ROW PER STEP duplicate variable (1) [[

  SELECT 1
    FROM MATCH ANY ([[a]]) -[ [[e]] ]->* ([[b]]) ONE ROW PER STEP ([[a]], [[e]], [[b]])

]] error like "Duplicate variable" at #1, #2, #3, #4, #5, #6

test ONE ROW PER STEP duplicate variable (2) [[

  SELECT 1
    FROM MATCH ANY (a) -[e]-> ([[b]]) ONE ROW PER STEP (v1, [[b]], v2)

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER STEP duplicate variable (3) [[

  SELECT 1
    FROM MATCH ANY (a) (-[e]-> ([[x]]))* (b) ONE ROW PER STEP (v1, [[x]], v2)

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER STEP duplicate variable (4) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]->* (b) ONE ROW PER STEP (v1, [[e]], v2)

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER STEP duplicate variable (5) [[

  SELECT 1
    FROM MATCH ANY (a) (-[e]-> ([[x]]))* (b) ONE ROW PER STEP ([[x]], e2, v2)

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER STEP duplicate variable (6) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]->* (b) ONE ROW PER STEP ([[e]], e2, v2)

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER STEP duplicate variable (7) [[

  SELECT 1
    FROM MATCH ANY (a) (-[e]-> ([[x]]))* (b) ONE ROW PER STEP (v1, e2, [[x]])

]] error like "Duplicate variable" at #1, #2

test ONE ROW PER STEP duplicate variable (8) [[

  SELECT 1
    FROM MATCH ANY (a) -[ [[e]] ]->* (b) ONE ROW PER STEP (v1, e2, [[e]])

]] error like "Duplicate variable" at #1, #2
test ONE ROW PER STEP duplicate variable (5) [[

    SELECT 1
      FROM MATCH ANY (a) ->* (b) ONE ROW PER STEP (v1, e, v2)
  GROUP BY a.prop AS [[v1]], a.prop AS [[e]], a.prop AS [[v2]]

]] error like "Duplicate variable: variable already defined in the FROM clause" at #1, #2, #3

test ONE ROW PER VERTEX same variable in subquery (1) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER VERTEX (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH () -[ [[v]] ]-> () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER VERTEX same variable in subquery (2) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER VERTEX (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH ANY () -[ [[v]] ]->* () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER EDGE same variable in subquery (1) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER EDGE (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH () -[ [[v]] ]-> () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER EDGE same variable in subquery (2) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER EDGE (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH () -> ([[v]]) )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER EDGE same variable in subquery (3) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER EDGE (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH ANY () -[ [[v]] ]->* () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER EDGE same variable in subquery (4) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER EDGE (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH ANY () (-> ([[v]]))* () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER STEP same variable in subquery (1) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER STEP (v1, e, v2)
   WHERE EXISTS ( SELECT 1 FROM MATCH () -[ [[v1]] ]-> () -[ [[e]] ]-> () -[ [[v2]] ]-> () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1, #2, #3

test ONE ROW PER STEP same variable in subquery (2) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER STEP (v1, v, v2)
   WHERE EXISTS ( SELECT 1 FROM MATCH () -> ([[v]]) )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER STEP same variable in subquery (3) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER STEP (v1, v, v2)
   WHERE EXISTS ( SELECT 1 FROM MATCH ANY () -[ [[v]] ]->* () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test ONE ROW PER STEP same variable in subquery (4) [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER STEP (v1, v, v2)
   WHERE EXISTS ( SELECT 1 FROM MATCH ANY () (-> ([[v]]))* () )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test Duplicate variables in ONE ROW PER VERTEX [[

  SELECT 1
    FROM MATCH ANY (a) ->* (b) ONE ROW PER EDGE (v)
   WHERE EXISTS ( SELECT 1 FROM MATCH ANY (b) ->* (c) ONE ROW PER VERTEX ([[v]]) )

]] error like "Duplicate variable (variable with same name is passed from an outer query)" at #1

test Duplicate variables in ONE ROW PER STEP (1) [[

  SELECT 1
    FROM MATCH ANY (b) ->* (c) ONE ROW PER STEP ([[v]], e, [[v]])

]] error like "Duplicate variable" at #1, #2

test Duplicate variables in ONE ROW PER STEP (2) [[

  SELECT 1
    FROM MATCH ANY (b) ->* (c) ONE ROW PER STEP ([[e]], [[e]], [[v]])

]] error like "Duplicate variable" at #1, #2

test Duplicate variables in ONE ROW PER STEP (3) [[

  SELECT 1
    FROM MATCH ANY (b) ->* (c) ONE ROW PER STEP (v, [[e]], [[e]])

]] error like "Duplicate variable" at #1, #2

test Nested path pattern prefix (1) [[

  SELECT 1
    FROM MATCH ANY ( [[ANY (]]n) ->* (m) )

]] error like "Nested path pattern prefix not allowed" at #1

test Nested path pattern prefix (2) [[

  SELECT SUM(e.amount) as sum, id(x), id(z)
  FROM MATCH ANY CHEAPEST ( [[ANY CHEAPEST (]]y)(-[e:transaction]-> COST e.amount)* (x) WHERE sum < 2000)
     , OPTIONAL MATCH ((x)->(z) WHERE id(z)='Person(1)')

]] error like "Nested path pattern prefix not allowed" at #1

test Path search prefix in combination with KEEP clause (1) [[

  SELECT 1
  FROM GRAPH_TABLE ( g
         MATCH [[ANY SHORTEST ACYCLIC (n)]] ->* (m)
         KEEP ANY SHORTEST
         COLUMNS ( n.prop )
       )

]] error like "GRAPH_TABLE restriction: use the KEEP clause" at #1

test Path search prefix in combination with KEEP clause (2) [[

  SELECT 1
  FROM GRAPH_TABLE ( g
         MATCH [[ANY ACYCLIC (n)]] ->* (m)
         KEEP ALL
         COLUMNS ( n.prop )
       )

]] error like "GRAPH_TABLE restriction: use the KEEP clause" at #1
